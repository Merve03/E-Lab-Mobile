{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useEffect as $ig234$useEffect } from \"react\";\nimport { filterDOMProps as $ig234$filterDOMProps, useFormReset as $ig234$useFormReset, getOwnerWindow as $ig234$getOwnerWindow, mergeProps as $ig234$mergeProps } from \"@react-aria/utils\";\nimport { useControlledState as $ig234$useControlledState } from \"@react-stately/utils\";\nimport { useField as $ig234$useField } from \"@react-aria/label\";\nimport { useFocusable as $ig234$useFocusable } from \"@react-aria/focus\";\nimport { useFormValidation as $ig234$useFormValidation } from \"@react-aria/form\";\nimport { useFormValidationState as $ig234$useFormValidationState } from \"@react-stately/form\";\nfunction $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {\n  var _props$inputElementTy = props.inputElementType,\n    inputElementType = _props$inputElementTy === void 0 ? 'input' : _props$inputElementTy,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$isRequired = props.isRequired,\n    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'text' : _props$type,\n    _props$validationBeha = props.validationBehavior,\n    validationBehavior = _props$validationBeha === void 0 ? 'aria' : _props$validationBeha;\n  var _ref = (0, $ig234$useControlledState)(props.value, props.defaultValue || '', props.onChange),\n    _ref2 = _slicedToArray(_ref, 2),\n    value = _ref2[0],\n    setValue = _ref2[1];\n  var _ref3 = (0, $ig234$useFocusable)(props, ref),\n    focusableProps = _ref3.focusableProps;\n  var validationState = (0, $ig234$useFormValidationState)(_objectSpread(_objectSpread({}, props), {}, {\n    value: value\n  }));\n  var _validationState$disp = validationState.displayValidation,\n    isInvalid = _validationState$disp.isInvalid,\n    validationErrors = _validationState$disp.validationErrors,\n    validationDetails = _validationState$disp.validationDetails;\n  var _ref4 = (0, $ig234$useField)(_objectSpread(_objectSpread({}, props), {}, {\n      isInvalid: isInvalid,\n      errorMessage: props.errorMessage || validationErrors\n    })),\n    labelProps = _ref4.labelProps,\n    fieldProps = _ref4.fieldProps,\n    descriptionProps = _ref4.descriptionProps,\n    errorMessageProps = _ref4.errorMessageProps;\n  var domProps = (0, $ig234$filterDOMProps)(props, {\n    labelable: true\n  });\n  var inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  (0, $ig234$useFormReset)(ref, value, setValue);\n  (0, $ig234$useFormValidation)(props, validationState, ref);\n  (0, $ig234$useEffect)(function () {\n    if (ref.current instanceof (0, $ig234$getOwnerWindow)(ref.current).HTMLTextAreaElement) {\n      var input = ref.current;\n      Object.defineProperty(input, 'defaultValue', {\n        get: function get() {\n          return input.value;\n        },\n        set: function set() {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $ig234$mergeProps)(domProps, inputElementType === 'input' ? inputOnlyProps : undefined, _objectSpread(_objectSpread({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      required: isRequired && validationBehavior === 'native',\n      'aria-required': isRequired && validationBehavior === 'aria' || undefined,\n      'aria-invalid': isInvalid || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-activedescendant': props['aria-activedescendant'],\n      'aria-autocomplete': props['aria-autocomplete'],\n      'aria-haspopup': props['aria-haspopup'],\n      value: value,\n      onChange: function onChange(e) {\n        return setValue(e.target.value);\n      },\n      autoComplete: props.autoComplete,\n      autoCapitalize: props.autoCapitalize,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      onSelect: props.onSelect,\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps), fieldProps)),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $2d73ec29415bd339$export$712718f7aec83d5 as useTextField };","map":{"version":3,"names":["$2d73ec29415bd339$export$712718f7aec83d5","props","ref","_props$inputElementTy","inputElementType","_props$isDisabled","isDisabled","_props$isRequired","isRequired","_props$isReadOnly","isReadOnly","_props$type","type","_props$validationBeha","validationBehavior","_ref","$ig234$useControlledState","value","defaultValue","onChange","_ref2","_slicedToArray","setValue","_ref3","$ig234$useFocusable","focusableProps","validationState","$ig234$useFormValidationState","_objectSpread","_validationState$disp","displayValidation","isInvalid","validationErrors","validationDetails","_ref4","$ig234$useField","errorMessage","labelProps","fieldProps","descriptionProps","errorMessageProps","domProps","$ig234$filterDOMProps","labelable","inputOnlyProps","pattern","$ig234$useFormReset","$ig234$useFormValidation","$ig234$useEffect","current","$ig234$getOwnerWindow","HTMLTextAreaElement","input","Object","defineProperty","get","set","configurable","inputProps","$ig234$mergeProps","undefined","disabled","readOnly","required","e","target","autoComplete","autoCapitalize","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput"],"sources":["C:\\Users\\merve\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  HTMLAttributes,\n  type JSX,\n  LabelHTMLAttributes,\n  RefObject,\n  useEffect\n} from 'react';\nimport {DOMAttributes, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, getOwnerWindow, mergeProps, useFormReset} from '@react-aria/utils';\nimport {useControlledState} from '@react-stately/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\nimport {useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = JSX.IntrinsicElements;\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n/**\n * The HTML element interfaces that `useTextField` supports based on what is\n * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n * `HTMLTextAreaElement`.\n */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n/**\n * The HTML attributes interfaces that `useTextField` supports based on what\n * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\nexport interface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps<TextFieldHTMLElementType[T]> {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T,\n  /**\n   * Controls whether inputted text is automatically capitalized and, if so, in what manner.\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).\n   */\n  autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T] | null>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> extends ValidationResult {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    type = 'text',\n    validationBehavior = 'aria'\n  } = props;\n  let [value, setValue] = useControlledState<string>(props.value, props.defaultValue || '', props.onChange);\n  let {focusableProps} = useFocusable<TextFieldHTMLElementType[T]>(props, ref);\n  let validationState = useFormValidationState({\n    ...props,\n    value\n  });\n  let {isInvalid, validationErrors, validationDetails} = validationState.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  useFormReset(ref, value, setValue);\n  useFormValidation(props, validationState, ref);\n\n  useEffect(() => {\n    // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.\n    // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,\n    // which causes Chrome to skip validation. Only updating `value` is ok in our case since our\n    // textareas are always controlled. React is planning on removing this synchronization in a\n    // future major version.\n    // https://github.com/facebook/react/issues/19474\n    // https://github.com/facebook/react/issues/11896\n    if (ref.current instanceof getOwnerWindow(ref.current).HTMLTextAreaElement) {\n      let input = ref.current;\n      Object.defineProperty(input, 'defaultValue', {\n        get: () => input.value,\n        set: () => {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' ? inputOnlyProps : undefined,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        required: isRequired && validationBehavior === 'native',\n        'aria-required': (isRequired && validationBehavior === 'aria') || undefined,\n        'aria-invalid': isInvalid || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value),\n        autoComplete: props.autoComplete,\n        autoCapitalize: props.autoCapitalize,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}