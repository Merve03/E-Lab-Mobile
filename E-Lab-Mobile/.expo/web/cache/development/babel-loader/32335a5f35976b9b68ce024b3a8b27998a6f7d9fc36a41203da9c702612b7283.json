{"ast":null,"code":"import { useComboBox as useComboBoxWeb } from '@react-aria/combobox';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nexport function useComboBox(props, state) {\n  var params = useComboBoxWeb(props, state);\n  var onKeyPress = params.inputProps.onKeyDown;\n  params.inputProps.onKeyDown = undefined;\n  params.inputProps.onKeyPress = onKeyPress;\n  params.inputProps.blurOnSubmit = false;\n  params.inputProps.onKeyDown = undefined;\n  return {\n    inputProps: mapDomPropsToRN(params.inputProps),\n    buttonProps: mapDomPropsToRN(params.buttonProps),\n    labelProps: mapDomPropsToRN(params.labelProps),\n    listBoxProps: mapDomPropsToRN(params.listBoxProps)\n  };\n}","map":{"version":3,"names":["useComboBox","useComboBoxWeb","mapDomPropsToRN","props","state","params","onKeyPress","inputProps","onKeyDown","undefined","blurOnSubmit","buttonProps","labelProps","listBoxProps"],"sources":["C:\\Users\\merve\\node_modules\\@react-native-aria\\combobox\\src\\useComboBox.web.ts"],"sourcesContent":["import { ComboBoxProps } from '@react-types/combobox';\nimport { ComboBoxState } from '@react-stately/combobox';\nimport { RefObject } from 'react';\nimport { KeyboardDelegate } from '@react-types/shared';\nimport { TextInput, View, Pressable, Touchable } from 'react-native';\nimport { useComboBox as useComboBoxWeb } from '@react-aria/combobox';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nimport { TextInputProps } from 'react-native';\n\ninterface AriaComboBoxProps<T> extends ComboBoxProps<T> {\n  /** The ref for the input element. */\n  inputRef: RefObject<TextInput>;\n  /** The ref for the list box popover. */\n  popoverRef: RefObject<View>;\n  /** The ref for the list box. */\n  listBoxRef: RefObject<View>;\n  /** The ref for the list box popup trigger button.  */\n  buttonRef: RefObject<typeof Pressable | Touchable>;\n  /** An optional keyboard delegate implementation, to override the default. */\n  keyboardDelegate?: KeyboardDelegate;\n}\n\ninterface ComboBoxAria {\n  /** Props for the combo box menu trigger button. */\n  buttonProps: any;\n  /** Props for the combo box input element. */\n  inputProps: TextInputProps;\n  /** Props for the combo box menu. */\n  listBoxProps: any;\n  /** Props for the combo box label element. */\n  labelProps: any;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a combo box component.\n * A combo box combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\n * @param props - Props for the combo box.\n * @param state - State for the select, as returned by `useComboBoxState`.\n */\nexport function useComboBox<T>(\n  props: AriaComboBoxProps<T>,\n  state: ComboBoxState<T>\n): ComboBoxAria {\n  // @ts-ignore\n  const params = useComboBoxWeb(props, state);\n\n  const onKeyPress = params.inputProps.onKeyDown;\n  params.inputProps.onKeyDown = undefined;\n\n  // RN Web supports onKeyPress. It's same as onKeyDown\n  // https://necolas.github.io/react-native-web/docs/text-input/\n  params.inputProps.onKeyPress = onKeyPress;\n\n  // @ts-ignore\n  params.inputProps.blurOnSubmit = false;\n  params.inputProps.onKeyDown = undefined;\n\n  return {\n    inputProps: mapDomPropsToRN(params.inputProps),\n    buttonProps: mapDomPropsToRN(params.buttonProps),\n    labelProps: mapDomPropsToRN(params.labelProps),\n    listBoxProps: mapDomPropsToRN(params.listBoxProps),\n  };\n}\n"],"mappings":"AAKA,SAASA,WAAW,IAAIC,cAAc,QAAQ,sBAAsB;AACpE,SAASC,eAAe,QAAQ,0BAA0B;AAiC1D,OAAO,SAASF,WAAWA,CACzBG,KAA2B,EAC3BC,KAAuB,EACT;EAEd,IAAMC,MAAM,GAAGJ,cAAc,CAACE,KAAK,EAAEC,KAAK,CAAC;EAE3C,IAAME,UAAU,GAAGD,MAAM,CAACE,UAAU,CAACC,SAAS;EAC9CH,MAAM,CAACE,UAAU,CAACC,SAAS,GAAGC,SAAS;EAIvCJ,MAAM,CAACE,UAAU,CAACD,UAAU,GAAGA,UAAU;EAGzCD,MAAM,CAACE,UAAU,CAACG,YAAY,GAAG,KAAK;EACtCL,MAAM,CAACE,UAAU,CAACC,SAAS,GAAGC,SAAS;EAEvC,OAAO;IACLF,UAAU,EAAEL,eAAe,CAACG,MAAM,CAACE,UAAU,CAAC;IAC9CI,WAAW,EAAET,eAAe,CAACG,MAAM,CAACM,WAAW,CAAC;IAChDC,UAAU,EAAEV,eAAe,CAACG,MAAM,CAACO,UAAU,CAAC;IAC9CC,YAAY,EAAEX,eAAe,CAACG,MAAM,CAACQ,YAAY;EACnD,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}