{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport $dShfP$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $dShfP$announce } from \"@react-aria/live-announcer\";\nimport { ariaHideOutside as $dShfP$ariaHideOutside } from \"@react-aria/overlays\";\nimport { listData as $dShfP$listData, getItemId as $dShfP$getItemId } from \"@react-aria/listbox\";\nimport { useRouter as $dShfP$useRouter, chain as $dShfP$chain, useLabels as $dShfP$useLabels, isAppleDevice as $dShfP$isAppleDevice, mergeProps as $dShfP$mergeProps } from \"@react-aria/utils\";\nimport { useRef as $dShfP$useRef, useMemo as $dShfP$useMemo, useEffect as $dShfP$useEffect } from \"react\";\nimport { getChildNodes as $dShfP$getChildNodes, getItemCount as $dShfP$getItemCount } from \"@react-stately/collections\";\nimport { ListKeyboardDelegate as $dShfP$ListKeyboardDelegate, useSelectableCollection as $dShfP$useSelectableCollection } from \"@react-aria/selection\";\nimport { privateValidationStateProp as $dShfP$privateValidationStateProp } from \"@react-stately/form\";\nimport { useLocalizedStringFormatter as $dShfP$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useMenuTrigger as $dShfP$useMenuTrigger } from \"@react-aria/menu\";\nimport { useTextField as $dShfP$useTextField } from \"@react-aria/textfield\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nfunction $c350ade66beef0af$export$8c18d1b4f7232bbf(props, state) {\n  var buttonRef = props.buttonRef,\n    popoverRef = props.popoverRef,\n    inputRef = props.inputRef,\n    listBoxRef = props.listBoxRef,\n    keyboardDelegate = props.keyboardDelegate,\n    layoutDelegate = props.layoutDelegate,\n    shouldFocusWrap = props.shouldFocusWrap,\n    isReadOnly = props.isReadOnly,\n    isDisabled = props.isDisabled;\n  var backupBtnRef = (0, $dShfP$useRef)(null);\n  buttonRef = buttonRef !== null && buttonRef !== void 0 ? buttonRef : backupBtnRef;\n  var stringFormatter = (0, $dShfP$useLocalizedStringFormatter)((0, $parcel$interopDefault($dShfP$intlStringsmodulejs)), '@react-aria/combobox');\n  var _ref2 = (0, $dShfP$useMenuTrigger)({\n      type: 'listbox',\n      isDisabled: isDisabled || isReadOnly\n    }, state, buttonRef),\n    menuTriggerProps = _ref2.menuTriggerProps,\n    menuProps = _ref2.menuProps;\n  (0, $dShfP$listData).set(state, {\n    id: menuProps.id\n  });\n  var collection = state.collection;\n  var disabledKeys = state.selectionManager.disabledKeys;\n  var delegate = (0, $dShfP$useMemo)(function () {\n    return keyboardDelegate || new (0, $dShfP$ListKeyboardDelegate)({\n      collection: collection,\n      disabledKeys: disabledKeys,\n      ref: listBoxRef,\n      layoutDelegate: layoutDelegate\n    });\n  }, [keyboardDelegate, layoutDelegate, collection, disabledKeys, listBoxRef]);\n  var _ref3 = (0, $dShfP$useSelectableCollection)({\n      selectionManager: state.selectionManager,\n      keyboardDelegate: delegate,\n      disallowTypeAhead: true,\n      disallowEmptySelection: true,\n      shouldFocusWrap: shouldFocusWrap,\n      ref: inputRef,\n      isVirtualized: true\n    }),\n    collectionProps = _ref3.collectionProps;\n  var router = (0, $dShfP$useRouter)();\n  var onKeyDown = function onKeyDown(e) {\n    if (e.nativeEvent.isComposing) return;\n    switch (e.key) {\n      case 'Enter':\n      case 'Tab':\n        if (state.isOpen && e.key === 'Enter') e.preventDefault();\n        if (state.isOpen && listBoxRef.current && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {\n          var item = listBoxRef.current.querySelector(`[data-key=\"${CSS.escape(state.selectionManager.focusedKey.toString())}\"]`);\n          if (e.key === 'Enter' && item instanceof HTMLAnchorElement) {\n            var collectionItem = state.collection.getItem(state.selectionManager.focusedKey);\n            if (collectionItem) router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions);\n          }\n          state.close();\n        } else state.commit();\n        break;\n      case 'Escape':\n        if (state.selectedKey !== null || state.inputValue === '' || props.allowsCustomValue) e.continuePropagation();\n        state.revert();\n        break;\n      case 'ArrowDown':\n        state.open('first', 'manual');\n        break;\n      case 'ArrowUp':\n        state.open('last', 'manual');\n        break;\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        state.selectionManager.setFocusedKey(null);\n        break;\n    }\n  };\n  var onBlur = function onBlur(e) {\n    var _popoverRef_current;\n    var blurFromButton = (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) && buttonRef.current === e.relatedTarget;\n    var blurIntoPopover = (_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(e.relatedTarget);\n    if (blurFromButton || blurIntoPopover) return;\n    if (props.onBlur) props.onBlur(e);\n    state.setFocused(false);\n  };\n  var onFocus = function onFocus(e) {\n    if (state.isFocused) return;\n    if (props.onFocus) props.onFocus(e);\n    state.setFocused(true);\n  };\n  var _state$displayValidat = state.displayValidation,\n    isInvalid = _state$displayValidat.isInvalid,\n    validationErrors = _state$displayValidat.validationErrors,\n    validationDetails = _state$displayValidat.validationDetails;\n  var _ref4 = (0, $dShfP$useTextField)(_objectSpread(_objectSpread({}, props), {}, _defineProperty({\n      onChange: state.setInputValue,\n      onKeyDown: !isReadOnly ? (0, $dShfP$chain)(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,\n      onBlur: onBlur,\n      value: state.inputValue,\n      onFocus: onFocus,\n      autoComplete: 'off',\n      validate: undefined\n    }, (0, $dShfP$privateValidationStateProp), state)), inputRef),\n    labelProps = _ref4.labelProps,\n    inputProps = _ref4.inputProps,\n    descriptionProps = _ref4.descriptionProps,\n    errorMessageProps = _ref4.errorMessageProps;\n  var onPress = function onPress(e) {\n    if (e.pointerType === 'touch') {\n      var _inputRef_current;\n      (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();\n      state.toggle(null, 'manual');\n    }\n  };\n  var onPressStart = function onPressStart(e) {\n    if (e.pointerType !== 'touch') {\n      var _inputRef_current;\n      (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();\n      state.toggle(e.pointerType === 'keyboard' || e.pointerType === 'virtual' ? 'first' : null, 'manual');\n    }\n  };\n  var triggerLabelProps = (0, $dShfP$useLabels)({\n    id: menuTriggerProps.id,\n    'aria-label': stringFormatter.format('buttonLabel'),\n    'aria-labelledby': props['aria-labelledby'] || labelProps.id\n  });\n  var listBoxProps = (0, $dShfP$useLabels)({\n    id: menuProps.id,\n    'aria-label': stringFormatter.format('listboxLabel'),\n    'aria-labelledby': props['aria-labelledby'] || labelProps.id\n  });\n  var lastEventTime = (0, $dShfP$useRef)(0);\n  var onTouchEnd = function onTouchEnd(e) {\n    if (isDisabled || isReadOnly) return;\n    if (e.timeStamp - lastEventTime.current < 500) {\n      var _inputRef_current;\n      e.preventDefault();\n      (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();\n      return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var touch = e.changedTouches[0];\n    var centerX = Math.ceil(rect.left + .5 * rect.width);\n    var centerY = Math.ceil(rect.top + .5 * rect.height);\n    if (touch.clientX === centerX && touch.clientY === centerY) {\n      var _inputRef_current1;\n      e.preventDefault();\n      (_inputRef_current1 = inputRef.current) === null || _inputRef_current1 === void 0 ? void 0 : _inputRef_current1.focus();\n      state.toggle(null, 'manual');\n      lastEventTime.current = e.timeStamp;\n    }\n  };\n  var focusedItem = state.selectionManager.focusedKey != null && state.isOpen ? state.collection.getItem(state.selectionManager.focusedKey) : undefined;\n  var _focusedItem_parentKey;\n  var sectionKey = (_focusedItem_parentKey = focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parentKey) !== null && _focusedItem_parentKey !== void 0 ? _focusedItem_parentKey : null;\n  var _state_selectionManager_focusedKey;\n  var itemKey = (_state_selectionManager_focusedKey = state.selectionManager.focusedKey) !== null && _state_selectionManager_focusedKey !== void 0 ? _state_selectionManager_focusedKey : null;\n  var lastSection = (0, $dShfP$useRef)(sectionKey);\n  var lastItem = (0, $dShfP$useRef)(itemKey);\n  (0, $dShfP$useEffect)(function () {\n    if ((0, $dShfP$isAppleDevice)() && focusedItem != null && itemKey != null && itemKey !== lastItem.current) {\n      var isSelected = state.selectionManager.isSelected(itemKey);\n      var section = sectionKey != null ? state.collection.getItem(sectionKey) : null;\n      var sectionTitle = (section === null || section === void 0 ? void 0 : section['aria-label']) || (typeof (section === null || section === void 0 ? void 0 : section.rendered) === 'string' ? section.rendered : '') || '';\n      var _ref;\n      var announcement = stringFormatter.format('focusAnnouncement', {\n        isGroupChange: (_ref = section && sectionKey !== lastSection.current) !== null && _ref !== void 0 ? _ref : false,\n        groupTitle: sectionTitle,\n        groupCount: section ? _toConsumableArray((0, $dShfP$getChildNodes)(section, state.collection)).length : 0,\n        optionText: focusedItem['aria-label'] || focusedItem.textValue || '',\n        isSelected: isSelected\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSection.current = sectionKey;\n    lastItem.current = itemKey;\n  });\n  var optionCount = (0, $dShfP$getItemCount)(state.collection);\n  var lastSize = (0, $dShfP$useRef)(optionCount);\n  var lastOpen = (0, $dShfP$useRef)(state.isOpen);\n  (0, $dShfP$useEffect)(function () {\n    var didOpenWithoutFocusedItem = state.isOpen !== lastOpen.current && (state.selectionManager.focusedKey == null || (0, $dShfP$isAppleDevice)());\n    if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {\n      var announcement = stringFormatter.format('countAnnouncement', {\n        optionCount: optionCount\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSize.current = optionCount;\n    lastOpen.current = state.isOpen;\n  });\n  var lastSelectedKey = (0, $dShfP$useRef)(state.selectedKey);\n  (0, $dShfP$useEffect)(function () {\n    if ((0, $dShfP$isAppleDevice)() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {\n      var optionText = state.selectedItem['aria-label'] || state.selectedItem.textValue || '';\n      var announcement = stringFormatter.format('selectedAnnouncement', {\n        optionText: optionText\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSelectedKey.current = state.selectedKey;\n  });\n  (0, $dShfP$useEffect)(function () {\n    if (state.isOpen) return (0, $dShfP$ariaHideOutside)([inputRef.current, popoverRef.current].filter(function (element) {\n      return element != null;\n    }));\n  }, [state.isOpen, inputRef, popoverRef]);\n  return {\n    labelProps: labelProps,\n    buttonProps: _objectSpread(_objectSpread(_objectSpread({}, menuTriggerProps), triggerLabelProps), {}, {\n      excludeFromTabOrder: true,\n      preventFocusOnPress: true,\n      onPress: onPress,\n      onPressStart: onPressStart,\n      isDisabled: isDisabled || isReadOnly\n    }),\n    inputProps: (0, $dShfP$mergeProps)(inputProps, {\n      role: 'combobox',\n      'aria-expanded': menuTriggerProps['aria-expanded'],\n      'aria-controls': state.isOpen ? menuProps.id : undefined,\n      'aria-autocomplete': 'list',\n      'aria-activedescendant': focusedItem ? (0, $dShfP$getItemId)(state, focusedItem.key) : undefined,\n      onTouchEnd: onTouchEnd,\n      autoCorrect: 'off',\n      spellCheck: 'false'\n    }),\n    listBoxProps: (0, $dShfP$mergeProps)(menuProps, listBoxProps, {\n      autoFocus: state.focusStrategy,\n      shouldUseVirtualFocus: true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      linkBehavior: 'selection'\n    }),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $c350ade66beef0af$export$8c18d1b4f7232bbf as useComboBox };","map":{"version":3,"names":["$c350ade66beef0af$export$8c18d1b4f7232bbf","props","state","buttonRef","popoverRef","inputRef","listBoxRef","keyboardDelegate","layoutDelegate","shouldFocusWrap","isReadOnly","isDisabled","backupBtnRef","$dShfP$useRef","stringFormatter","$dShfP$useLocalizedStringFormatter","$parcel$interopDefault","$dShfP$intlStringsmodulejs","_ref2","$dShfP$useMenuTrigger","type","menuTriggerProps","menuProps","$dShfP$listData","set","id","collection","disabledKeys","selectionManager","delegate","$dShfP$useMemo","$dShfP$ListKeyboardDelegate","ref","_ref3","$dShfP$useSelectableCollection","disallowTypeAhead","disallowEmptySelection","isVirtualized","collectionProps","router","$dShfP$useRouter","onKeyDown","e","nativeEvent","isComposing","key","isOpen","preventDefault","current","focusedKey","isLink","item","querySelector","CSS","escape","toString","HTMLAnchorElement","collectionItem","getItem","open","href","routerOptions","close","commit","selectedKey","inputValue","allowsCustomValue","continuePropagation","revert","setFocusedKey","onBlur","_popoverRef_current","blurFromButton","relatedTarget","blurIntoPopover","contains","setFocused","onFocus","isFocused","_state$displayValidat","displayValidation","isInvalid","validationErrors","validationDetails","_ref4","$dShfP$useTextField","_objectSpread","_defineProperty","onChange","setInputValue","$dShfP$chain","value","autoComplete","validate","undefined","$dShfP$privateValidationStateProp","labelProps","inputProps","descriptionProps","errorMessageProps","onPress","pointerType","_inputRef_current","focus","toggle","onPressStart","triggerLabelProps","$dShfP$useLabels","format","listBoxProps","lastEventTime","onTouchEnd","timeStamp","rect","target","getBoundingClientRect","touch","changedTouches","centerX","Math","ceil","left","width","centerY","top","height","clientX","clientY","_inputRef_current1","focusedItem","_focusedItem_parentKey","sectionKey","parentKey","_state_selectionManager_focusedKey","itemKey","lastSection","lastItem","$dShfP$useEffect","$dShfP$isAppleDevice","isSelected","section","sectionTitle","rendered","_ref","announcement","isGroupChange","groupTitle","groupCount","_toConsumableArray","$dShfP$getChildNodes","length","optionText","textValue","$dShfP$announce","optionCount","$dShfP$getItemCount","lastSize","lastOpen","didOpenWithoutFocusedItem","lastSelectedKey","selectedItem","$dShfP$ariaHideOutside","filter","element","buttonProps","excludeFromTabOrder","preventFocusOnPress","$dShfP$mergeProps","role","$dShfP$getItemId","autoCorrect","spellCheck","autoFocus","focusStrategy","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","linkBehavior"],"sources":["C:\\Users\\merve\\node_modules\\@react-native-aria\\combobox\\node_modules\\@react-aria\\combobox\\dist\\packages\\@react-aria\\combobox\\src\\useComboBox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaComboBoxProps} from '@react-types/combobox';\nimport {ariaHideOutside} from '@react-aria/overlays';\nimport {AriaListBoxOptions, getItemId, listData} from '@react-aria/listbox';\nimport {BaseEvent, DOMAttributes, KeyboardDelegate, LayoutDelegate, PressEvent, RefObject, RouterOptions, ValidationResult} from '@react-types/shared';\nimport {chain, isAppleDevice, mergeProps, useLabels, useRouter} from '@react-aria/utils';\nimport {ComboBoxState} from '@react-stately/combobox';\nimport {FocusEvent, InputHTMLAttributes, KeyboardEvent, TouchEvent, useEffect, useMemo, useRef} from 'react';\nimport {getChildNodes, getItemCount} from '@react-stately/collections';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListKeyboardDelegate, useSelectableCollection} from '@react-aria/selection';\nimport {privateValidationStateProp} from '@react-stately/form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useMenuTrigger} from '@react-aria/menu';\nimport {useTextField} from '@react-aria/textfield';\n\nexport interface AriaComboBoxOptions<T> extends Omit<AriaComboBoxProps<T>, 'children'> {\n  /** The ref for the input element. */\n  inputRef: RefObject<HTMLInputElement | null>,\n  /** The ref for the list box popover. */\n  popoverRef: RefObject<Element | null>,\n  /** The ref for the list box. */\n  listBoxRef: RefObject<HTMLElement | null>,\n  /** The ref for the optional list box popup trigger button.  */\n  buttonRef?: RefObject<Element | null>,\n  /** An optional keyboard delegate implementation, to override the default. */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate\n}\n\nexport interface ComboBoxAria<T> extends ValidationResult {\n  /** Props for the label element. */\n  labelProps: DOMAttributes,\n  /** Props for the combo box input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the list box, to be passed to [useListBox](useListBox.html). */\n  listBoxProps: AriaListBoxOptions<T>,\n  /** Props for the optional trigger button, to be passed to [useButton](useButton.html). */\n  buttonProps: AriaButtonProps,\n  /** Props for the combo box description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the combo box error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a combo box component.\n * A combo box combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\n * @param props - Props for the combo box.\n * @param state - State for the select, as returned by `useComboBoxState`.\n */\nexport function useComboBox<T>(props: AriaComboBoxOptions<T>, state: ComboBoxState<T>): ComboBoxAria<T> {\n  let {\n    buttonRef,\n    popoverRef,\n    inputRef,\n    listBoxRef,\n    keyboardDelegate,\n    layoutDelegate,\n    // completionMode = 'suggest',\n    shouldFocusWrap,\n    isReadOnly,\n    isDisabled\n  } = props;\n  let backupBtnRef = useRef(null);\n  buttonRef = buttonRef ?? backupBtnRef;\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/combobox');\n  let {menuTriggerProps, menuProps} = useMenuTrigger<T>(\n    {\n      type: 'listbox',\n      isDisabled: isDisabled || isReadOnly\n    },\n    state,\n    buttonRef\n  );\n\n  // Set listbox id so it can be used when calling getItemId later\n  listData.set(state, {id: menuProps.id});\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let {collection} = state;\n  let {disabledKeys} = state.selectionManager;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate({\n      collection,\n      disabledKeys,\n      ref: listBoxRef,\n      layoutDelegate\n    })\n  ), [keyboardDelegate, layoutDelegate, collection, disabledKeys, listBoxRef]);\n\n  // Use useSelectableCollection to get the keyboard handlers to apply to the textfield\n  let {collectionProps} = useSelectableCollection({\n    selectionManager: state.selectionManager,\n    keyboardDelegate: delegate,\n    disallowTypeAhead: true,\n    disallowEmptySelection: true,\n    shouldFocusWrap,\n    ref: inputRef,\n    // Prevent item scroll behavior from being applied here, should be handled in the user's Popover + ListBox component\n    isVirtualized: true\n  });\n\n  let router = useRouter();\n\n  // For textfield specific keydown operations\n  let onKeyDown = (e: BaseEvent<KeyboardEvent<any>>) => {\n    if (e.nativeEvent.isComposing) {\n      return;\n    }\n    switch (e.key) {\n      case 'Enter':\n      case 'Tab':\n        // Prevent form submission if menu is open since we may be selecting a option\n        if (state.isOpen && e.key === 'Enter') {\n          e.preventDefault();\n        }\n\n        // If the focused item is a link, trigger opening it. Items that are links are not selectable.\n        if (state.isOpen && listBoxRef.current && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {\n          let item = listBoxRef.current.querySelector(`[data-key=\"${CSS.escape(state.selectionManager.focusedKey.toString())}\"]`);\n          if (e.key === 'Enter' && item instanceof HTMLAnchorElement) {\n            let collectionItem = state.collection.getItem(state.selectionManager.focusedKey);\n            if (collectionItem) {\n              router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions as RouterOptions);\n            }\n          }\n\n          state.close();\n        } else {\n          state.commit();\n        }\n        break;\n      case 'Escape':\n        if (\n          state.selectedKey !== null ||\n          state.inputValue === '' ||\n          props.allowsCustomValue\n        ) {\n          e.continuePropagation();\n        }\n        state.revert();\n        break;\n      case 'ArrowDown':\n        state.open('first', 'manual');\n        break;\n      case 'ArrowUp':\n        state.open('last', 'manual');\n        break;\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        state.selectionManager.setFocusedKey(null);\n        break;\n    }\n  };\n\n  let onBlur = (e: FocusEvent<HTMLInputElement>) => {\n    let blurFromButton = buttonRef?.current && buttonRef.current === e.relatedTarget;\n    let blurIntoPopover = popoverRef.current?.contains(e.relatedTarget);\n    // Ignore blur if focused moved to the button(if exists) or into the popover.\n    if (blurFromButton || blurIntoPopover) {\n      return;\n    }\n\n    if (props.onBlur) {\n      props.onBlur(e);\n    }\n\n    state.setFocused(false);\n  };\n\n  let onFocus = (e: FocusEvent<HTMLInputElement>) => {\n    if (state.isFocused) {\n      return;\n    }\n\n    if (props.onFocus) {\n      props.onFocus(e);\n    }\n\n    state.setFocused(true);\n  };\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, inputProps, descriptionProps, errorMessageProps} = useTextField({\n    ...props,\n    onChange: state.setInputValue,\n    onKeyDown: !isReadOnly ? chain(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,\n    onBlur,\n    value: state.inputValue,\n    onFocus,\n    autoComplete: 'off',\n    validate: undefined,\n    [privateValidationStateProp]: state\n  }, inputRef);\n\n  // Press handlers for the ComboBox button\n  let onPress = (e: PressEvent) => {\n    if (e.pointerType === 'touch') {\n      // Focus the input field in case it isn't focused yet\n      inputRef.current?.focus();\n      state.toggle(null, 'manual');\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType !== 'touch') {\n      inputRef.current?.focus();\n      state.toggle((e.pointerType === 'keyboard' || e.pointerType === 'virtual') ? 'first' : null, 'manual');\n    }\n  };\n\n  let triggerLabelProps = useLabels({\n    id: menuTriggerProps.id,\n    'aria-label': stringFormatter.format('buttonLabel'),\n    'aria-labelledby': props['aria-labelledby'] || labelProps.id\n  });\n\n  let listBoxProps = useLabels({\n    id: menuProps.id,\n    'aria-label': stringFormatter.format('listboxLabel'),\n    'aria-labelledby': props['aria-labelledby'] || labelProps.id\n  });\n\n  // If a touch happens on direct center of ComboBox input, might be virtual click from iPad so open ComboBox menu\n  let lastEventTime = useRef(0);\n  let onTouchEnd = (e: TouchEvent) => {\n    if (isDisabled || isReadOnly) {\n      return;\n    }\n\n    // Sometimes VoiceOver on iOS fires two touchend events in quick succession. Ignore the second one.\n    if (e.timeStamp - lastEventTime.current < 500) {\n      e.preventDefault();\n      inputRef.current?.focus();\n      return;\n    }\n\n    let rect = (e.target as Element).getBoundingClientRect();\n    let touch = e.changedTouches[0];\n\n    let centerX = Math.ceil(rect.left + .5 * rect.width);\n    let centerY = Math.ceil(rect.top + .5 * rect.height);\n\n    if (touch.clientX === centerX && touch.clientY === centerY) {\n      e.preventDefault();\n      inputRef.current?.focus();\n      state.toggle(null, 'manual');\n\n      lastEventTime.current = e.timeStamp;\n    }\n  };\n\n  // VoiceOver has issues with announcing aria-activedescendant properly on change\n  // (especially on iOS). We use a live region announcer to announce focus changes\n  // manually. In addition, section titles are announced when navigating into a new section.\n  let focusedItem = state.selectionManager.focusedKey != null && state.isOpen\n    ? state.collection.getItem(state.selectionManager.focusedKey)\n    : undefined;\n  let sectionKey = focusedItem?.parentKey ?? null;\n  let itemKey = state.selectionManager.focusedKey ?? null;\n  let lastSection = useRef(sectionKey);\n  let lastItem = useRef(itemKey);\n  useEffect(() => {\n    if (isAppleDevice() && focusedItem != null && itemKey != null && itemKey !== lastItem.current) {\n      let isSelected = state.selectionManager.isSelected(itemKey);\n      let section = sectionKey != null ? state.collection.getItem(sectionKey) : null;\n      let sectionTitle = section?.['aria-label'] || (typeof section?.rendered === 'string' ? section.rendered : '') || '';\n\n      let announcement = stringFormatter.format('focusAnnouncement', {\n        isGroupChange: (section && sectionKey !== lastSection.current) ?? false,\n        groupTitle: sectionTitle,\n        groupCount: section ? [...getChildNodes(section, state.collection)].length : 0,\n        optionText: focusedItem['aria-label'] || focusedItem.textValue || '',\n        isSelected\n      });\n\n      announce(announcement);\n    }\n\n    lastSection.current = sectionKey;\n    lastItem.current = itemKey;\n  });\n\n  // Announce the number of available suggestions when it changes\n  let optionCount = getItemCount(state.collection);\n  let lastSize = useRef(optionCount);\n  let lastOpen = useRef(state.isOpen);\n  useEffect(() => {\n    // Only announce the number of options available when the menu opens if there is no\n    // focused item, otherwise screen readers will typically read e.g. \"1 of 6\".\n    // The exception is VoiceOver since this isn't included in the message above.\n    let didOpenWithoutFocusedItem =\n      state.isOpen !== lastOpen.current &&\n      (state.selectionManager.focusedKey == null || isAppleDevice());\n\n    if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {\n      let announcement = stringFormatter.format('countAnnouncement', {optionCount});\n      announce(announcement);\n    }\n\n    lastSize.current = optionCount;\n    lastOpen.current = state.isOpen;\n  });\n\n  // Announce when a selection occurs for VoiceOver. Other screen readers typically do this automatically.\n  let lastSelectedKey = useRef(state.selectedKey);\n  useEffect(() => {\n    if (isAppleDevice() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {\n      let optionText = state.selectedItem['aria-label'] || state.selectedItem.textValue || '';\n      let announcement = stringFormatter.format('selectedAnnouncement', {optionText});\n      announce(announcement);\n    }\n\n    lastSelectedKey.current = state.selectedKey;\n  });\n\n  useEffect(() => {\n    if (state.isOpen) {\n      return ariaHideOutside([inputRef.current, popoverRef.current].filter(element => element != null));\n    }\n  }, [state.isOpen, inputRef, popoverRef]);\n\n  return {\n    labelProps,\n    buttonProps: {\n      ...menuTriggerProps,\n      ...triggerLabelProps,\n      excludeFromTabOrder: true,\n      preventFocusOnPress: true,\n      onPress,\n      onPressStart,\n      isDisabled: isDisabled || isReadOnly\n    },\n    inputProps: mergeProps(inputProps, {\n      role: 'combobox',\n      'aria-expanded': menuTriggerProps['aria-expanded'],\n      'aria-controls': state.isOpen ? menuProps.id : undefined,\n      // TODO: readd proper logic for completionMode = complete (aria-autocomplete: both)\n      'aria-autocomplete': 'list',\n      'aria-activedescendant': focusedItem ? getItemId(state, focusedItem.key) : undefined,\n      onTouchEnd,\n      // This disable's iOS's autocorrect suggestions, since the combo box provides its own suggestions.\n      autoCorrect: 'off',\n      // This disable's the macOS Safari spell check auto corrections.\n      spellCheck: 'false'\n    }),\n    listBoxProps: mergeProps(menuProps, listBoxProps, {\n      autoFocus: state.focusStrategy,\n      shouldUseVirtualFocus: true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      linkBehavior: 'selection' as const\n    }),\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAsEO,SAASA,0CAAeC,KAA6B,EAAEC,KAAuB;EACnF,IACEC,SAAS,GAUPF,KAAA,CAXAE,SAAA;IAEFC,UAAU,GASRH,KAAA,CAVOG,UAAA;IAETC,QAAQ,GAQNJ,KAAA,CATQI,QAAA;IAEVC,UAAU,GAORL,KAAA,CARMK,UAAA;IAERC,gBAAgB,GAMdN,KAAA,CAPQM,gBAAA;IAEVC,cAAc,GAKZP,KAAA,CANcO,cAAA;IAGhBC,eAAe,GAGbR,KAAA,CALYQ,eAAA;IAGdC,UAAU,GAERT,KAAA,CAHaS,UAAA;IAEfC,UAAU,GACRV,KAAA,CAFQU,UAAA;EAGZ,IAAIC,YAAA,GAAe,IAAAC,aAAK,EAAE;EAC1BV,SAAA,GAAYA,SAAA,aAAAA,SAAA,cAAAA,SAAA,GAAaS,YAAA;EAEzB,IAAIE,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAChE,IAAAC,KAAA,GAAoC,IAAAC,qBAAa,EAC/C;MACEC,IAAA,EAAM;MACNT,UAAA,EAAYA,UAAA,IAAcD;IAC5B,GACAR,KAAA,EACAC,SAAA;IANGkB,gBAAgB,GAAAH,KAAA,CAAjBG,gBAAA;IAAmBC,SAAS,GAAAJ,KAAA,CAAXI,SAAA;EAUrB,IAAAC,eAAO,EAAEC,GAAG,CAACtB,KAAA,EAAO;IAACuB,EAAA,EAAIH,SAAA,CAAUG;EAAE;EAIrC,IAAKC,UAAU,GAAIxB,KAAA,CAAfwB,UAAA;EACJ,IAAKC,YAAY,GAAIzB,KAAA,CAAM0B,gBAAgB,CAAvCD,YAAA;EACJ,IAAIE,QAAA,GAAW,IAAAC,cAAM,EAAE;IAAA,OACrBvB,gBAAA,IAAoB,KAAI,GAAAwB,2BAAmB,EAAE;kBAC3CL,UAAA;oBACAC,YAAA;MACAK,GAAA,EAAK1B,UAAA;sBACLE;IACF;EAAA,GACC,CAACD,gBAAA,EAAkBC,cAAA,EAAgBkB,UAAA,EAAYC,YAAA,EAAcrB,UAAA,CAAW;EAG3E,IAAA2B,KAAA,GAAwB,IAAAC,8BAAsB,EAAE;MAC9CN,gBAAA,EAAkB1B,KAAA,CAAM0B,gBAAgB;MACxCrB,gBAAA,EAAkBsB,QAAA;MAClBM,iBAAA,EAAmB;MACnBC,sBAAA,EAAwB;uBACxB3B,eAAA;MACAuB,GAAA,EAAK3B,QAAA;MAELgC,aAAA,EAAe;IACjB;IATKC,eAAe,GAAAL,KAAA,CAAhBK,eAAA;EAWJ,IAAIC,MAAA,GAAS,IAAAC,gBAAQ;EAGrB,IAAIC,SAAA,GAAY,SAAZA,UAAaC,CAAA;IACf,IAAIA,CAAA,CAAEC,WAAW,CAACC,WAAW,EAC3B;IAEF,QAAQF,CAAA,CAAEG,GAAG;MACX,KAAK;MACL,KAAK;QAEH,IAAI3C,KAAA,CAAM4C,MAAM,IAAIJ,CAAA,CAAEG,GAAG,KAAK,SAC5BH,CAAA,CAAEK,cAAc;QAIlB,IAAI7C,KAAA,CAAM4C,MAAM,IAAIxC,UAAA,CAAW0C,OAAO,IAAI9C,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,IAAI,QAAQ/C,KAAA,CAAM0B,gBAAgB,CAACsB,MAAM,CAAChD,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,GAAG;UACvJ,IAAIE,IAAA,GAAO7C,UAAA,CAAW0C,OAAO,CAACI,aAAa,CAAC,cAAcC,GAAA,CAAIC,MAAM,CAACpD,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,CAACM,QAAQ,OAAO;UACtH,IAAIb,CAAA,CAAEG,GAAG,KAAK,WAAWM,IAAA,YAAgBK,iBAAA,EAAmB;YAC1D,IAAIC,cAAA,GAAiBvD,KAAA,CAAMwB,UAAU,CAACgC,OAAO,CAACxD,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU;YAC/E,IAAIQ,cAAA,EACFlB,MAAA,CAAOoB,IAAI,CAACR,IAAA,EAAMT,CAAA,EAAGe,cAAA,CAAexD,KAAK,CAAC2D,IAAI,EAAEH,cAAA,CAAexD,KAAK,CAAC4D,aAAa;UAEtF;UAEA3D,KAAA,CAAM4D,KAAK;QACb,OACE5D,KAAA,CAAM6D,MAAM;QAEd;MACF,KAAK;QACH,IACE7D,KAAA,CAAM8D,WAAW,KAAK,QACtB9D,KAAA,CAAM+D,UAAU,KAAK,MACrBhE,KAAA,CAAMiE,iBAAiB,EAEvBxB,CAAA,CAAEyB,mBAAmB;QAEvBjE,KAAA,CAAMkE,MAAM;QACZ;MACF,KAAK;QACHlE,KAAA,CAAMyD,IAAI,CAAC,SAAS;QACpB;MACF,KAAK;QACHzD,KAAA,CAAMyD,IAAI,CAAC,QAAQ;QACnB;MACF,KAAK;MACL,KAAK;QACHzD,KAAA,CAAM0B,gBAAgB,CAACyC,aAAa,CAAC;QACrC;IACJ;EACF;EAEA,IAAIC,MAAA,GAAS,SAATA,OAAU5B,CAAA;QAEU6B,mBAAA;IADtB,IAAIC,cAAA,GAAiB,CAAArE,SAAA,aAAAA,SAAA,uBAAAA,SAAA,CAAW6C,OAAO,KAAI7C,SAAA,CAAU6C,OAAO,KAAKN,CAAA,CAAE+B,aAAa;IAChF,IAAIC,eAAA,IAAkBH,mBAAA,GAAAnE,UAAA,CAAW4C,OAAO,cAAlBuB,mBAAA,uBAAAA,mBAAA,CAAoBI,QAAQ,CAACjC,CAAA,CAAE+B,aAAa;IAElE,IAAID,cAAA,IAAkBE,eAAA,EACpB;IAGF,IAAIzE,KAAA,CAAMqE,MAAM,EACdrE,KAAA,CAAMqE,MAAM,CAAC5B,CAAA;IAGfxC,KAAA,CAAM0E,UAAU,CAAC;EACnB;EAEA,IAAIC,OAAA,GAAU,SAAVA,QAAWnC,CAAA;IACb,IAAIxC,KAAA,CAAM4E,SAAS,EACjB;IAGF,IAAI7E,KAAA,CAAM4E,OAAO,EACf5E,KAAA,CAAM4E,OAAO,CAACnC,CAAA;IAGhBxC,KAAA,CAAM0E,UAAU,CAAC;EACnB;EAEA,IAAAG,qBAAA,GAAuD7E,KAAA,CAAM8E,iBAAiB;IAAzEC,SAAS,GAAAF,qBAAA,CAAVE,SAAA;IAAYC,gBAAgB,GAAAH,qBAAA,CAAlBG,gBAAA;IAAoBC,iBAAiB,GAAAJ,qBAAA,CAAnBI,iBAAA;EAChC,IAAAC,KAAA,GAAoE,IAAAC,mBAAW,EAAAC,aAAA,CAAAA,aAAA,KAC1ErF,KAAK,OAAAsF,eAAA;MACRC,QAAA,EAAUtF,KAAA,CAAMuF,aAAa;MAC7BhD,SAAA,EAAW,CAAC/B,UAAA,GAAa,IAAAgF,YAAI,EAAExF,KAAA,CAAM4C,MAAM,IAAIR,eAAA,CAAgBG,SAAS,EAAEA,SAAA,EAAWxC,KAAA,CAAMwC,SAAS,IAAIxC,KAAA,CAAMwC,SAAS;cACvH6B,MAAA;MACAqB,KAAA,EAAOzF,KAAA,CAAM+D,UAAU;eACvBY,OAAA;MACAe,YAAA,EAAc;MACdC,QAAA,EAAUC;IAAA,IACT,GAAAC,iCAAyB,GAAI7F,KAAA,IAC7BG,QAAA;IAVE2F,UAAU,GAAAZ,KAAA,CAAXY,UAAA;IAAaC,UAAU,GAAAb,KAAA,CAAZa,UAAA;IAAcC,gBAAgB,GAAAd,KAAA,CAAlBc,gBAAA;IAAoBC,iBAAiB,GAAAf,KAAA,CAAnBe,iBAAA;EAa7C,IAAIC,OAAA,GAAU,SAAVA,QAAW1D,CAAA;IACb,IAAIA,CAAA,CAAE2D,WAAW,KAAK,SAAS;UAE7BC,iBAAA;OAAAA,iBAAA,GAAAjG,QAAA,CAAS2C,OAAO,cAAhBsD,iBAAA,uBAAAA,iBAAA,CAAkBC,KAAK;MACvBrG,KAAA,CAAMsG,MAAM,CAAC,MAAM;IACrB;EACF;EAEA,IAAIC,YAAA,GAAe,SAAfA,aAAgB/D,CAAA;IAClB,IAAIA,CAAA,CAAE2D,WAAW,KAAK,SAAS;UAC7BC,iBAAA;OAAAA,iBAAA,GAAAjG,QAAA,CAAS2C,OAAO,cAAhBsD,iBAAA,uBAAAA,iBAAA,CAAkBC,KAAK;MACvBrG,KAAA,CAAMsG,MAAM,CAAC9D,CAAC,CAAE2D,WAAW,KAAK,cAAc3D,CAAA,CAAE2D,WAAW,KAAK,YAAa,UAAU,MAAM;IAC/F;EACF;EAEA,IAAIK,iBAAA,GAAoB,IAAAC,gBAAQ,EAAE;IAChClF,EAAA,EAAIJ,gBAAA,CAAiBI,EAAE;IACvB,cAAcX,eAAA,CAAgB8F,MAAM,CAAC;IACrC,mBAAmB3G,KAAK,CAAC,kBAAkB,IAAI+F,UAAA,CAAWvE;EAC5D;EAEA,IAAIoF,YAAA,GAAe,IAAAF,gBAAQ,EAAE;IAC3BlF,EAAA,EAAIH,SAAA,CAAUG,EAAE;IAChB,cAAcX,eAAA,CAAgB8F,MAAM,CAAC;IACrC,mBAAmB3G,KAAK,CAAC,kBAAkB,IAAI+F,UAAA,CAAWvE;EAC5D;EAGA,IAAIqF,aAAA,GAAgB,IAAAjG,aAAK,EAAE;EAC3B,IAAIkG,UAAA,GAAa,SAAbA,WAAcrE,CAAA;IAChB,IAAI/B,UAAA,IAAcD,UAAA,EAChB;IAIF,IAAIgC,CAAA,CAAEsE,SAAS,GAAGF,aAAA,CAAc9D,OAAO,GAAG,KAAK;UAE7CsD,iBAAA;MADA5D,CAAA,CAAEK,cAAc;OAChBuD,iBAAA,GAAAjG,QAAA,CAAS2C,OAAO,cAAhBsD,iBAAA,uBAAAA,iBAAA,CAAkBC,KAAK;MACvB;IACF;IAEA,IAAIU,IAAA,GAAOvE,CAAC,CAAEwE,MAAM,CAAaC,qBAAqB;IACtD,IAAIC,KAAA,GAAQ1E,CAAA,CAAE2E,cAAc,CAAC,EAAE;IAE/B,IAAIC,OAAA,GAAUC,IAAA,CAAKC,IAAI,CAACP,IAAA,CAAKQ,IAAI,GAAG,KAAKR,IAAA,CAAKS,KAAK;IACnD,IAAIC,OAAA,GAAUJ,IAAA,CAAKC,IAAI,CAACP,IAAA,CAAKW,GAAG,GAAG,KAAKX,IAAA,CAAKY,MAAM;IAEnD,IAAIT,KAAA,CAAMU,OAAO,KAAKR,OAAA,IAAWF,KAAA,CAAMW,OAAO,KAAKJ,OAAA,EAAS;UAE1DK,kBAAA;MADAtF,CAAA,CAAEK,cAAc;OAChBiF,kBAAA,GAAA3H,QAAA,CAAS2C,OAAO,cAAhBgF,kBAAA,uBAAAA,kBAAA,CAAkBzB,KAAK;MACvBrG,KAAA,CAAMsG,MAAM,CAAC,MAAM;MAEnBM,aAAA,CAAc9D,OAAO,GAAGN,CAAA,CAAEsE,SAAS;IACrC;EACF;EAKA,IAAIiB,WAAA,GAAc/H,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,IAAI,QAAQ/C,KAAA,CAAM4C,MAAM,GACvE5C,KAAA,CAAMwB,UAAU,CAACgC,OAAO,CAACxD,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,IAC1D6C,SAAA;MACaoC,sBAAA;EAAjB,IAAIC,UAAA,GAAa,CAAAD,sBAAA,GAAAD,WAAA,aAAAA,WAAA,uBAAAA,WAAA,CAAaG,SAAS,cAAtBF,sBAAA,cAAAA,sBAAA,GAA0B;MAC7BG,kCAAA;EAAd,IAAIC,OAAA,GAAU,CAAAD,kCAAA,GAAAnI,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,cAAjCoF,kCAAA,cAAAA,kCAAA,GAAqC;EACnD,IAAIE,WAAA,GAAc,IAAA1H,aAAK,EAAEsH,UAAA;EACzB,IAAIK,QAAA,GAAW,IAAA3H,aAAK,EAAEyH,OAAA;EACtB,IAAAG,gBAAQ,EAAE;IACR,IAAI,IAAAC,oBAAY,OAAOT,WAAA,IAAe,QAAQK,OAAA,IAAW,QAAQA,OAAA,KAAYE,QAAA,CAASxF,OAAO,EAAE;MAC7F,IAAI2F,UAAA,GAAazI,KAAA,CAAM0B,gBAAgB,CAAC+G,UAAU,CAACL,OAAA;MACnD,IAAIM,OAAA,GAAUT,UAAA,IAAc,OAAOjI,KAAA,CAAMwB,UAAU,CAACgC,OAAO,CAACyE,UAAA,IAAc;MAC1E,IAAIU,YAAA,GAAe,CAAAD,OAAA,aAAAA,OAAA,uBAAAA,OAAS,CAAC,aAAa,MAAK,QAAOA,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASE,QAAQ,MAAK,WAAWF,OAAA,CAAQE,QAAQ,GAAG,EAAC,KAAM;UAG/FC,IAAA;MADlB,IAAIC,YAAA,GAAelI,eAAA,CAAgB8F,MAAM,CAAC,qBAAqB;QAC7DqC,aAAA,EAAe,CAACF,IAAA,GAAAH,OAAA,IAAWT,UAAA,KAAeI,WAAA,CAAYvF,OAAO,cAA7C+F,IAAA,cAAAA,IAAA,GAAkD;QAClEG,UAAA,EAAYL,YAAA;QACZM,UAAA,EAAYP,OAAA,GAAUQ,kBAAA,CAAI,IAAAC,oBAAY,EAAET,OAAA,EAAS1I,KAAA,CAAMwB,UAAU,GAAG4H,MAAM,GAAG;QAC7EC,UAAA,EAAYtB,WAAW,CAAC,aAAa,IAAIA,WAAA,CAAYuB,SAAS,IAAI;oBAClEb;MACF;MAEA,IAAAc,eAAO,EAAET,YAAA;IACX;IAEAT,WAAA,CAAYvF,OAAO,GAAGmF,UAAA;IACtBK,QAAA,CAASxF,OAAO,GAAGsF,OAAA;EACrB;EAGA,IAAIoB,WAAA,GAAc,IAAAC,mBAAW,EAAEzJ,KAAA,CAAMwB,UAAU;EAC/C,IAAIkI,QAAA,GAAW,IAAA/I,aAAK,EAAE6I,WAAA;EACtB,IAAIG,QAAA,GAAW,IAAAhJ,aAAK,EAAEX,KAAA,CAAM4C,MAAM;EAClC,IAAA2F,gBAAQ,EAAE;IAIR,IAAIqB,yBAAA,GACF5J,KAAA,CAAM4C,MAAM,KAAK+G,QAAA,CAAS7G,OAAO,KAChC9C,KAAA,CAAM0B,gBAAgB,CAACqB,UAAU,IAAI,QAAQ,IAAAyF,oBAAY,GAAE;IAE9D,IAAIxI,KAAA,CAAM4C,MAAM,KAAKgH,yBAAA,IAA6BJ,WAAA,KAAgBE,QAAA,CAAS5G,OAAO,CAAD,EAAI;MACnF,IAAIgG,YAAA,GAAelI,eAAA,CAAgB8F,MAAM,CAAC,qBAAqB;qBAAC8C;MAAW;MAC3E,IAAAD,eAAO,EAAET,YAAA;IACX;IAEAY,QAAA,CAAS5G,OAAO,GAAG0G,WAAA;IACnBG,QAAA,CAAS7G,OAAO,GAAG9C,KAAA,CAAM4C,MAAM;EACjC;EAGA,IAAIiH,eAAA,GAAkB,IAAAlJ,aAAK,EAAEX,KAAA,CAAM8D,WAAW;EAC9C,IAAAyE,gBAAQ,EAAE;IACR,IAAI,IAAAC,oBAAY,OAAOxI,KAAA,CAAM4E,SAAS,IAAI5E,KAAA,CAAM8J,YAAY,IAAI9J,KAAA,CAAM8D,WAAW,KAAK+F,eAAA,CAAgB/G,OAAO,EAAE;MAC7G,IAAIuG,UAAA,GAAarJ,KAAA,CAAM8J,YAAY,CAAC,aAAa,IAAI9J,KAAA,CAAM8J,YAAY,CAACR,SAAS,IAAI;MACrF,IAAIR,YAAA,GAAelI,eAAA,CAAgB8F,MAAM,CAAC,wBAAwB;oBAAC2C;MAAU;MAC7E,IAAAE,eAAO,EAAET,YAAA;IACX;IAEAe,eAAA,CAAgB/G,OAAO,GAAG9C,KAAA,CAAM8D,WAAW;EAC7C;EAEA,IAAAyE,gBAAQ,EAAE;IACR,IAAIvI,KAAA,CAAM4C,MAAM,EACd,OAAO,IAAAmH,sBAAc,EAAE,CAAC5J,QAAA,CAAS2C,OAAO,EAAE5C,UAAA,CAAW4C,OAAO,CAAC,CAACkH,MAAM,CAAC,UAAAC,OAAA;MAAA,OAAWA,OAAA,IAAW;IAAA;EAE/F,GAAG,CAACjK,KAAA,CAAM4C,MAAM,EAAEzC,QAAA,EAAUD,UAAA,CAAW;EAEvC,OAAO;gBACL4F,UAAA;IACAoE,WAAA,EAAA9E,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACKjE,gBAAgB,GAChBqF,iBAAiB;MACpB2D,mBAAA,EAAqB;MACrBC,mBAAA,EAAqB;eACrBlE,OAAA;oBACAK,YAAA;MACA9F,UAAA,EAAYA,UAAA,IAAcD;IAAA,EAC5B;IACAuF,UAAA,EAAY,IAAAsE,iBAAS,EAAEtE,UAAA,EAAY;MACjCuE,IAAA,EAAM;MACN,iBAAiBnJ,gBAAgB,CAAC,gBAAgB;MAClD,iBAAiBnB,KAAA,CAAM4C,MAAM,GAAGxB,SAAA,CAAUG,EAAE,GAAGqE,SAAA;MAE/C,qBAAqB;MACrB,yBAAyBmC,WAAA,GAAc,IAAAwC,gBAAQ,EAAEvK,KAAA,EAAO+H,WAAA,CAAYpF,GAAG,IAAIiD,SAAA;kBAC3EiB,UAAA;MAEA2D,WAAA,EAAa;MAEbC,UAAA,EAAY;IACd;IACA9D,YAAA,EAAc,IAAA0D,iBAAS,EAAEjJ,SAAA,EAAWuF,YAAA,EAAc;MAChD+D,SAAA,EAAW1K,KAAA,CAAM2K,aAAa;MAC9BC,qBAAA,EAAuB;MACvBC,qBAAA,EAAuB;MACvBC,kBAAA,EAAoB;MACpBC,YAAA,EAAc;IAChB;sBACA/E,gBAAA;uBACAC,iBAAA;eACAlB,SAAA;sBACAC,gBAAA;uBACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}