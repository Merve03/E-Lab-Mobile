{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Selection as $e40ea825a81a3709$export$52baac22726c72bf } from \"./Selection.mjs\";\nimport { useControlledState as $6tM1y$useControlledState } from \"@react-stately/utils\";\nimport { useRef as $6tM1y$useRef, useState as $6tM1y$useState, useMemo as $6tM1y$useMemo, useEffect as $6tM1y$useEffect } from \"react\";\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (var item of setA) {\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n    _props$disallowEmptyS = props.disallowEmptySelection,\n    disallowEmptySelection = _props$disallowEmptyS === void 0 ? false : _props$disallowEmptyS,\n    allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n    _props$selectionBehav = props.selectionBehavior,\n    selectionBehaviorProp = _props$selectionBehav === void 0 ? 'toggle' : _props$selectionBehav,\n    _props$disabledBehavi = props.disabledBehavior,\n    disabledBehavior = _props$disabledBehavi === void 0 ? 'all' : _props$disabledBehavi;\n  var isFocusedRef = (0, $6tM1y$useRef)(false);\n  var _ref = (0, $6tM1y$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    _setFocused = _ref2[1];\n  var focusedKeyRef = (0, $6tM1y$useRef)(null);\n  var childFocusStrategyRef = (0, $6tM1y$useRef)(null);\n  var _ref3 = (0, $6tM1y$useState)(null),\n    _ref4 = _slicedToArray(_ref3, 2),\n    _setFocusedKey = _ref4[1];\n  var selectedKeysProp = (0, $6tM1y$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = (0, $6tM1y$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }, [props.defaultSelectedKeys]);\n  var _ref5 = (0, $6tM1y$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _ref6 = _slicedToArray(_ref5, 2),\n    selectedKeys = _ref6[0],\n    _setSelectedKeys = _ref6[1];\n  var disabledKeysProp = (0, $6tM1y$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var _ref7 = (0, $6tM1y$useState)(selectionBehaviorProp),\n    _ref8 = _slicedToArray(_ref7, 2),\n    selectionBehavior = _ref8[0],\n    setSelectionBehavior = _ref8[1];\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  var lastSelectionBehavior = (0, $6tM1y$useRef)(selectionBehaviorProp);\n  (0, $6tM1y$useEffect)(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState };","map":{"version":3,"names":["$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","_props$selectionMode","selectionMode","_props$disallowEmptyS","disallowEmptySelection","allowDuplicateSelectionEvents","_props$selectionBehav","selectionBehavior","selectionBehaviorProp","_props$disabledBehavi","disabledBehavior","isFocusedRef","$6tM1y$useRef","_ref","$6tM1y$useState","_ref2","_slicedToArray","setFocused","focusedKeyRef","childFocusStrategyRef","_ref3","_ref4","setFocusedKey","selectedKeysProp","$6tM1y$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","$e40ea825a81a3709$export$52baac22726c72bf","_ref5","$6tM1y$useControlledState","onSelectionChange","_ref6","setSelectedKeys","disabledKeysProp","disabledKeys","Set","_ref7","_ref8","setSelectionBehavior","lastSelectionBehavior","$6tM1y$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","arguments","length","undefined","keys","selection","defaultValue"],"sources":["C:\\Users\\merve\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\useMultipleSelectionState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, FocusStrategy, Key, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection = false,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef<Key | null>(null);\n  let childFocusStrategyRef = useRef<FocusStrategy | null>(null);\n  let [, setFocusedKey] = useState<Key | null>(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys!,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key> | null | undefined, defaultValue?: Selection): 'all' | Set<Key> | undefined {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}