{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useUNSTABLE_PortalContext as $96b38030c423d352$export$574e9b0fb070c3b0 } from \"./PortalProvider.mjs\";\nimport { ClearPressResponder as $1CM7W$ClearPressResponder } from \"@react-aria/interactions\";\nimport { FocusScope as $1CM7W$FocusScope } from \"@react-aria/focus\";\nimport $1CM7W$react, { useState as $1CM7W$useState, useMemo as $1CM7W$useMemo, useContext as $1CM7W$useContext } from \"react\";\nimport $1CM7W$reactdom from \"react-dom\";\nimport { useIsSSR as $1CM7W$useIsSSR } from \"@react-aria/ssr\";\nimport { useLayoutEffect as $1CM7W$useLayoutEffect } from \"@react-aria/utils\";\nvar $337b884510726a0d$export$a2200b96afd16271 = (0, $1CM7W$react).createContext(null);\nfunction $337b884510726a0d$export$c6fdb837b070b4ff(props) {\n  var isSSR = (0, $1CM7W$useIsSSR)();\n  var _props$portalContaine = props.portalContainer,\n    portalContainer = _props$portalContaine === void 0 ? isSSR ? null : document.body : _props$portalContaine,\n    isExiting = props.isExiting;\n  var _ref = (0, $1CM7W$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    contain = _ref2[0],\n    setContain = _ref2[1];\n  var contextValue = (0, $1CM7W$useMemo)(function () {\n    return {\n      contain: contain,\n      setContain: setContain\n    };\n  }, [contain, setContain]);\n  var _ref3 = (0, $96b38030c423d352$export$574e9b0fb070c3b0)(),\n    getContainer = _ref3.getContainer;\n  if (!props.portalContainer && getContainer) portalContainer = getContainer();\n  if (!portalContainer) return null;\n  var contents = props.children;\n  if (!props.disableFocusManagement) contents = (0, $1CM7W$react).createElement((0, $1CM7W$FocusScope), {\n    restoreFocus: true,\n    contain: contain && !isExiting\n  }, contents);\n  contents = (0, $1CM7W$react).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {\n    value: contextValue\n  }, (0, $1CM7W$react).createElement((0, $1CM7W$ClearPressResponder), null, contents));\n  return (0, $1CM7W$reactdom).createPortal(contents, portalContainer);\n}\nfunction $337b884510726a0d$export$14c98a7594375490() {\n  var ctx = (0, $1CM7W$useContext)($337b884510726a0d$export$a2200b96afd16271);\n  var setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;\n  (0, $1CM7W$useLayoutEffect)(function () {\n    setContain === null || setContain === void 0 ? void 0 : setContain(true);\n  }, [setContain]);\n}\nexport { $337b884510726a0d$export$a2200b96afd16271 as OverlayContext, $337b884510726a0d$export$c6fdb837b070b4ff as Overlay, $337b884510726a0d$export$14c98a7594375490 as useOverlayFocusContain };","map":{"version":3,"names":["$337b884510726a0d$export$a2200b96afd16271","$1CM7W$react","createContext","$337b884510726a0d$export$c6fdb837b070b4ff","props","isSSR","$1CM7W$useIsSSR","_props$portalContaine","portalContainer","document","body","isExiting","_ref","$1CM7W$useState","_ref2","_slicedToArray","contain","setContain","contextValue","$1CM7W$useMemo","_ref3","$96b38030c423d352$export$574e9b0fb070c3b0","getContainer","contents","children","disableFocusManagement","createElement","$1CM7W$FocusScope","restoreFocus","Provider","value","$1CM7W$ClearPressResponder","$1CM7W$reactdom","createPortal","$337b884510726a0d$export$14c98a7594375490","ctx","$1CM7W$useContext","$1CM7W$useLayoutEffect"],"sources":["C:\\Users\\merve\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\Overlay.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ClearPressResponder} from '@react-aria/interactions';\nimport {FocusScope} from '@react-aria/focus';\nimport React, {ReactNode, useContext, useMemo, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useIsSSR} from '@react-aria/ssr';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useUNSTABLE_PortalContext} from './PortalProvider';\n\nexport interface OverlayProps {\n  /**\n   * The container element in which the overlay portal will be placed.\n   * @default document.body\n   */\n  portalContainer?: Element,\n  /** The overlay to render in the portal. */\n  children: ReactNode,\n  /**\n   * Disables default focus management for the overlay, including containment and restoration.\n   * This option should be used very carefully. When focus management is disabled, you must\n   * implement focus containment and restoration to ensure the overlay is keyboard accessible.\n   */\n  disableFocusManagement?: boolean,\n  /**\n   * Whether the overlay is currently performing an exit animation. When true,\n   * focus is allowed to move outside.\n   */\n  isExiting?: boolean\n}\n\nexport const OverlayContext = React.createContext<{contain: boolean, setContain: React.Dispatch<React.SetStateAction<boolean>>} | null>(null);\n\n/**\n * A container which renders an overlay such as a popover or modal in a portal,\n * and provides a focus scope for the child elements.\n */\nexport function Overlay(props: OverlayProps) {\n  let isSSR = useIsSSR();\n  let {portalContainer = isSSR ? null : document.body, isExiting} = props;\n  let [contain, setContain] = useState(false);\n  let contextValue = useMemo(() => ({contain, setContain}), [contain, setContain]);\n\n  let {getContainer} = useUNSTABLE_PortalContext();\n  if  (!props.portalContainer && getContainer) {\n    portalContainer = getContainer();\n  }\n\n  if (!portalContainer) {\n    return null;\n  }\n\n  let contents = props.children;\n  if (!props.disableFocusManagement) {\n    contents = (\n      <FocusScope restoreFocus contain={contain && !isExiting}>\n        {contents}\n      </FocusScope>\n    );\n  }\n\n  contents = (\n    <OverlayContext.Provider value={contextValue}>\n      <ClearPressResponder>\n        {contents}\n      </ClearPressResponder>\n    </OverlayContext.Provider>\n  );\n\n  return ReactDOM.createPortal(contents, portalContainer);\n}\n\n/** @private */\nexport function useOverlayFocusContain() {\n  let ctx = useContext(OverlayContext);\n  let setContain = ctx?.setContain;\n  useLayoutEffect(() => {\n    setContain?.(true);\n  }, [setContain]);\n}\n"],"mappings":";;;;;;;;AAyCO,IAAMA,yCAAA,GAAiB,IAAAC,YAAI,EAAEC,aAAa,CAAuF;AAMjI,SAASC,0CAAQC,KAAmB;EACzC,IAAIC,KAAA,GAAQ,IAAAC,eAAO;EACnB,IAAAC,qBAAA,GAAkEH,KAAA,CAA9DI,eAAA;IAACA,eAAA,GAAAD,qBAAA,cAAkBF,KAAA,GAAQ,OAAOI,QAAA,CAASC,IAAI,GAAAH,qBAAA;IAAEI,SAAS,GAAIP,KAAA,CAAfO,SAAA;EACnD,IAAAC,IAAA,GAA4B,IAAAC,eAAO,EAAE;IAAAC,KAAA,GAAAC,cAAA,CAAAH,IAAA;IAAhCI,OAAA,GAAAF,KAAA;IAASG,UAAA,GAAAH,KAAA;EACd,IAAII,YAAA,GAAe,IAAAC,cAAM,EAAE;IAAA,OAAO;eAACH,OAAA;kBAASC;IAAU;EAAA,GAAI,CAACD,OAAA,EAASC,UAAA,CAAW;EAE/E,IAAAG,KAAA,GAAqB,IAAAC,yCAAwB;IAAxCC,YAAY,GAAAF,KAAA,CAAbE,YAAA;EACJ,IAAK,CAAClB,KAAA,CAAMI,eAAe,IAAIc,YAAA,EAC7Bd,eAAA,GAAkBc,YAAA;EAGpB,IAAI,CAACd,eAAA,EACH,OAAO;EAGT,IAAIe,QAAA,GAAWnB,KAAA,CAAMoB,QAAQ;EAC7B,IAAI,CAACpB,KAAA,CAAMqB,sBAAsB,EAC/BF,QAAA,GACE,IAAAtB,YAAA,EAAAyB,aAAA,EAAC,GAAAC,iBAAS;IAAEC,YAAA;IAAaZ,OAAA,EAASA,OAAA,IAAW,CAACL;KAC3CY,QAAA;EAKPA,QAAA,GACE,IAAAtB,YAAA,EAAAyB,aAAA,CAAC1B,yCAAA,CAAe6B,QAAQ;IAACC,KAAA,EAAOZ;KAC9B,IAAAjB,YAAA,EAAAyB,aAAA,EAAC,GAAAK,0BAAkB,SAChBR,QAAA;EAKP,OAAO,IAAAS,eAAO,EAAEC,YAAY,CAACV,QAAA,EAAUf,eAAA;AACzC;AAGO,SAAS0B,0CAAA;EACd,IAAIC,GAAA,GAAM,IAAAC,iBAAS,EAAEpC,yCAAA;EACrB,IAAIiB,UAAA,GAAakB,GAAA,aAAAA,GAAA,uBAAAA,GAAA,CAAKlB,UAAU;EAChC,IAAAoB,sBAAc,EAAE;IACdpB,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAa;EACf,GAAG,CAACA,UAAA,CAAW;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}