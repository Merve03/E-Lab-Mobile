{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getItemCount } from '@react-stately/collections';\nimport { getItemId } from \"./utils\";\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\nexport function useOption(props, state, ref) {\n  var isSelected = props.isSelected,\n    isDisabled = props.isDisabled,\n    key = props.key,\n    shouldSelectOnPressUp = props.shouldSelectOnPressUp,\n    shouldFocusOnHover = props.shouldFocusOnHover,\n    isVirtualized = props.isVirtualized,\n    shouldUseVirtualFocus = props.shouldUseVirtualFocus;\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var _optionProps = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n  var _useSelectableItem = useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = usePress(_objectSpread(_objectSpread({}, itemProps), {}, {\n      isDisabled: isDisabled,\n      preventFocusOnPress: shouldUseVirtualFocus\n    })),\n    pressProps = _usePress.pressProps;\n  var _useHover = useHover({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }, ref),\n    hoverProps = _useHover.hoverProps;\n  var onMouseDown = function onMouseDown(e) {\n    return e.stopPropagation();\n  };\n  _optionProps = _objectSpread(_objectSpread(_objectSpread({}, _optionProps), mergeProps(pressProps, hoverProps)), {}, {\n    id: getItemId(state, key),\n    onMouseDown: onMouseDown\n  });\n  var optionProps = useMapDomPropsToRN(_optionProps, ref);\n  return {\n    optionProps: optionProps,\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    }\n  };\n}","map":{"version":3,"names":["getItemCount","getItemId","isFocusVisible","useHover","usePress","isMac","isWebKit","mergeProps","useSlotId","useSelectableItem","useMapDomPropsToRN","useOption","props","state","ref","isSelected","isDisabled","key","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","shouldUseVirtualFocus","labelId","descriptionId","_optionProps","collection","getItem","index","_useSelectableItem","selectionManager","itemProps","_usePress","_objectSpread","preventFocusOnPress","pressProps","_useHover","onHoverStart","setFocused","setFocusedKey","hoverProps","onMouseDown","e","stopPropagation","id","optionProps","labelProps","descriptionProps"],"sources":["C:\\Users\\merve\\node_modules\\@react-native-aria\\listbox\\src\\useOption.web.ts"],"sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { ListState } from '@react-stately/list';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let _optionProps: any = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected,\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  });\n\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus,\n  });\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          //@ts-ignore\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown = (e: any) => e.stopPropagation();\n\n  _optionProps = {\n    ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown,\n  };\n\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n\n  return {\n    optionProps,\n    labelProps: {\n      id: labelId,\n    },\n    descriptionProps: {\n      id: descriptionId,\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}