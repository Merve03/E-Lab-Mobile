{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { listData as $b1f0cad8af73213b$export$3585ede4d035bf14 } from \"./utils.mjs\";\nimport { filterDOMProps as $by1yQ$filterDOMProps, useId as $by1yQ$useId, mergeProps as $by1yQ$mergeProps } from \"@react-aria/utils\";\nimport { useFocusWithin as $by1yQ$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLabel as $by1yQ$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $by1yQ$useSelectableList } from \"@react-aria/selection\";\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = (0, $by1yQ$filterDOMProps)(props, {\n    labelable: true\n  });\n  var selectionBehavior = props.selectionBehavior || 'toggle';\n  var linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') linkBehavior = 'override';\n  var _ref = (0, $by1yQ$useSelectableList)(_objectSpread(_objectSpread({}, props), {}, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      linkBehavior: linkBehavior\n    })),\n    listProps = _ref.listProps;\n  var _ref2 = (0, $by1yQ$useFocusWithin)({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _ref2.focusWithinProps;\n  var id = (0, $by1yQ$useId)(props.id);\n  (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior\n  });\n  var _ref3 = (0, $by1yQ$useLabel)(_objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    labelProps = _ref3.labelProps,\n    fieldProps = _ref3.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $by1yQ$mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, (0, $by1yQ$mergeProps)(fieldProps, listProps)))\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox };","map":{"version":3,"names":["$c132121280ec012d$export$50eacbbf140a3141","props","state","ref","domProps","$by1yQ$filterDOMProps","labelable","selectionBehavior","linkBehavior","_ref","$by1yQ$useSelectableList","_objectSpread","selectionManager","collection","disabledKeys","listProps","_ref2","$by1yQ$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","id","$by1yQ$useId","$b1f0cad8af73213b$export$3585ede4d035bf14","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","_ref3","$by1yQ$useLabel","labelElementType","labelProps","fieldProps","listBoxProps","$by1yQ$mergeProps","selectionMode","role"],"sources":["C:\\Users\\merve\\node_modules\\@react-native-aria\\combobox\\node_modules\\@react-aria\\combobox\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate, LayoutDelegate, RefObject} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'override'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement | null>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') {\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  }\n\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n"],"mappings":";;;;;;;;AAwEO,SAASA,0CAAcC,KAA4B,EAAEC,KAAmB,EAAEC,GAAkC;EACjH,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAEJ,KAAA,EAAO;IAACK,SAAA,EAAW;EAAI;EAErD,IAAIC,iBAAA,GAAoBN,KAAA,CAAMM,iBAAiB,IAAI;EACnD,IAAIC,YAAA,GAAeP,KAAA,CAAMO,YAAY,KAAKD,iBAAA,KAAsB,YAAY,WAAW,UAAS;EAChG,IAAIA,iBAAA,KAAsB,YAAYC,YAAA,KAAiB,UAIrDA,YAAA,GAAe;EAGjB,IAAAC,IAAA,GAAkB,IAAAC,wBAAgB,EAAAC,aAAA,CAAAA,aAAA,KAC7BV,KAAK;WACRE,GAAA;MACAS,gBAAA,EAAkBV,KAAA,CAAMU,gBAAgB;MACxCC,UAAA,EAAYX,KAAA,CAAMW,UAAU;MAC5BC,YAAA,EAAcZ,KAAA,CAAMY,YAAY;oBAChCN;IAAA,EACF;IAPKO,SAAS,GAAAN,IAAA,CAAVM,SAAA;EASJ,IAAAC,KAAA,GAAyB,IAAAC,qBAAa,EAAE;MACtCC,aAAA,EAAejB,KAAA,CAAMkB,OAAO;MAC5BC,YAAA,EAAcnB,KAAA,CAAMoB,MAAM;MAC1BC,mBAAA,EAAqBrB,KAAA,CAAMsB;IAC7B;IAJKC,gBAAgB,GAAAR,KAAA,CAAjBQ,gBAAA;EAOJ,IAAIC,EAAA,GAAK,IAAAC,YAAI,EAAEzB,KAAA,CAAMwB,EAAE;EACvB,IAAAE,yCAAO,EAAEC,GAAG,CAAC1B,KAAA,EAAO;QAClBuB,EAAA;IACAI,qBAAA,EAAuB5B,KAAA,CAAM4B,qBAAqB;IAClDC,qBAAA,EAAuB7B,KAAA,CAAM6B,qBAAqB;IAClDC,kBAAA,EAAoB9B,KAAA,CAAM8B,kBAAkB;IAC5CC,aAAA,EAAe/B,KAAA,CAAM+B,aAAa;IAClCC,QAAA,EAAUhC,KAAA,CAAMgC,QAAQ;kBACxBzB;EACF;EAEA,IAAA0B,KAAA,GAA+B,IAAAC,eAAO,EAAAxB,aAAA,CAAAA,aAAA,KACjCV,KAAK;UACRwB,EAAA;MAGAW,gBAAA,EAAkB;IAAA,EACpB;IANKC,UAAU,GAAAH,KAAA,CAAXG,UAAA;IAAaC,UAAU,GAAAJ,KAAA,CAAZI,UAAA;EAQf,OAAO;gBACLD,UAAA;IACAE,YAAA,EAAc,IAAAC,iBAAS,EAAEpC,QAAA,EAAUoB,gBAAA,EAAkBtB,KAAA,CAAMU,gBAAgB,CAAC6B,aAAa,KAAK,aAAa;MACzG,wBAAwB;IAC1B,IAAI,CAAC,GAAA9B,aAAA;MACH+B,IAAA,EAAM;IAAA,GACH,IAAAF,iBAAS,EAAEF,UAAA,EAAYvB,SAAA,CAAU,CACtC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}