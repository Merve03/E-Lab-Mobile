{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState as $7exkJ$useState, useMemo as $7exkJ$useMemo, useCallback as $7exkJ$useCallback } from \"react\";\nfunction $e5614764aa47eb35$export$cfc51cf86138bf98(props, state) {\n  var triggerKey = props.triggerKey;\n  var expandedKeysStack = state.expandedKeysStack,\n    openSubmenu = state.openSubmenu,\n    closeSubmenu = state.closeSubmenu,\n    closeAll = state.close;\n  var _ref = (0, $7exkJ$useState)(expandedKeysStack === null || expandedKeysStack === void 0 ? void 0 : expandedKeysStack.length),\n    _ref2 = _slicedToArray(_ref, 1),\n    submenuLevel = _ref2[0];\n  var isOpen = (0, $7exkJ$useMemo)(function () {\n    return expandedKeysStack[submenuLevel] === triggerKey;\n  }, [expandedKeysStack, triggerKey, submenuLevel]);\n  var _ref3 = (0, $7exkJ$useState)(null),\n    _ref4 = _slicedToArray(_ref3, 2),\n    focusStrategy = _ref4[0],\n    setFocusStrategy = _ref4[1];\n  var open = (0, $7exkJ$useCallback)(function (focusStrategy) {\n    setFocusStrategy(focusStrategy !== null && focusStrategy !== void 0 ? focusStrategy : null);\n    openSubmenu(triggerKey, submenuLevel);\n  }, [openSubmenu, submenuLevel, triggerKey]);\n  var close = (0, $7exkJ$useCallback)(function () {\n    setFocusStrategy(null);\n    closeSubmenu(triggerKey, submenuLevel);\n  }, [closeSubmenu, submenuLevel, triggerKey]);\n  var toggle = (0, $7exkJ$useCallback)(function (focusStrategy) {\n    setFocusStrategy(focusStrategy !== null && focusStrategy !== void 0 ? focusStrategy : null);\n    if (isOpen) close();else open(focusStrategy);\n  }, [close, open, isOpen]);\n  return (0, $7exkJ$useMemo)(function () {\n    return {\n      focusStrategy: focusStrategy,\n      isOpen: isOpen,\n      open: open,\n      close: close,\n      closeAll: closeAll,\n      submenuLevel: submenuLevel,\n      setOpen: function setOpen() {},\n      toggle: toggle\n    };\n  }, [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\nexport { $e5614764aa47eb35$export$cfc51cf86138bf98 as useSubmenuTriggerState };","map":{"version":3,"names":["$e5614764aa47eb35$export$cfc51cf86138bf98","props","state","triggerKey","expandedKeysStack","openSubmenu","closeSubmenu","closeAll","close","_ref","$7exkJ$useState","length","_ref2","_slicedToArray","submenuLevel","isOpen","$7exkJ$useMemo","_ref3","_ref4","focusStrategy","setFocusStrategy","open","$7exkJ$useCallback","toggle","setOpen"],"sources":["C:\\Users\\merve\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useSubmenuTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport type {OverlayTriggerState} from '@react-stately/overlays';\nimport {RootMenuTriggerState} from './useMenuTriggerState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface SubmenuTriggerProps {\n  /** Key of the trigger item. */\n  triggerKey: Key\n}\n\nexport interface SubmenuTriggerState extends OverlayTriggerState {\n  /** Whether the submenu is currently open. */\n  isOpen: boolean,\n  /** Controls which item will be auto focused when the submenu opens. */\n  focusStrategy: FocusStrategy | null,\n  /** Opens the submenu. */\n  open: (focusStrategy?: FocusStrategy | null) => void,\n  /** Closes the submenu. */\n  close: () => void,\n  /** Closes all menus and submenus in the menu tree. */\n  closeAll: () => void,\n  /** The level of the submenu. */\n  submenuLevel: number,\n  /** Toggles the submenu. */\n  toggle: (focusStrategy?: FocusStrategy | null) => void,\n  /** @private */\n  setOpen: () => void\n}\n\n/**\n * Manages state for a submenu trigger. Tracks whether the submenu is currently open, the level of the submenu, and\n * controls which item will receive focus when it opens.\n */\nexport function useSubmenuTriggerState(props: SubmenuTriggerProps, state: RootMenuTriggerState): SubmenuTriggerState  {\n  let {triggerKey} = props;\n  let {expandedKeysStack, openSubmenu, closeSubmenu, close: closeAll} = state;\n  let [submenuLevel] = useState(expandedKeysStack?.length);\n  let isOpen = useMemo(() => expandedKeysStack[submenuLevel] === triggerKey, [expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy | null>(null);\n\n  let open = useCallback((focusStrategy?: FocusStrategy | null) => {\n    setFocusStrategy(focusStrategy ?? null);\n    openSubmenu(triggerKey, submenuLevel);\n  }, [openSubmenu, submenuLevel, triggerKey]);\n\n  let close = useCallback(() => {\n    setFocusStrategy(null);\n    closeSubmenu(triggerKey, submenuLevel);\n  }, [closeSubmenu, submenuLevel, triggerKey]);\n\n  let toggle = useCallback((focusStrategy?: FocusStrategy | null) => {\n    setFocusStrategy(focusStrategy ?? null);\n    if (isOpen) {\n      close();\n    } else {\n      open(focusStrategy);\n    }\n  }, [close, open, isOpen]);\n\n  return useMemo(() => ({\n    focusStrategy,\n    isOpen,\n    open,\n    close,\n    closeAll,\n    submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\n"],"mappings":";;AA6CO,SAASA,0CAAuBC,KAA0B,EAAEC,KAA2B;EAC5F,IAAKC,UAAU,GAAIF,KAAA,CAAfE,UAAA;EACJ,IAAKC,iBAAiB,GAAgDF,KAAA,CAAlEE,iBAAA;IAAoBC,WAAW,GAAmCH,KAAA,CAAhDG,WAAA;IAAeC,YAAY,GAAqBJ,KAAA,CAAnCI,YAAA;IAAuBC,QAAQ,GAAIL,KAAA,CAAnBM,KAAA;EACnD,IAAAC,IAAA,GAAqB,IAAAC,eAAO,EAAEN,iBAAA,aAAAA,iBAAA,uBAAAA,iBAAA,CAAmBO,MAAM;IAAAC,KAAA,GAAAC,cAAA,CAAAJ,IAAA;IAAlDK,YAAA,GAAAF,KAAA;EACL,IAAIG,MAAA,GAAS,IAAAC,cAAM,EAAE;IAAA,OAAMZ,iBAAiB,CAACU,YAAA,CAAa,KAAKX,UAAA;EAAA,GAAY,CAACC,iBAAA,EAAmBD,UAAA,EAAYW,YAAA,CAAa;EACxH,IAAAG,KAAA,GAAwC,IAAAP,eAAO,EAAwB;IAAAQ,KAAA,GAAAL,cAAA,CAAAI,KAAA;IAAlEE,aAAA,GAAAD,KAAA;IAAeE,gBAAA,GAAAF,KAAA;EAEpB,IAAIG,IAAA,GAAO,IAAAC,kBAAU,EAAE,UAACH,aAAA;IACtBC,gBAAA,CAAiBD,aAAA,aAAAA,aAAA,cAAAA,aAAA,GAAiB;IAClCd,WAAA,CAAYF,UAAA,EAAYW,YAAA;EAC1B,GAAG,CAACT,WAAA,EAAaS,YAAA,EAAcX,UAAA,CAAW;EAE1C,IAAIK,KAAA,GAAQ,IAAAc,kBAAU,EAAE;IACtBF,gBAAA,CAAiB;IACjBd,YAAA,CAAaH,UAAA,EAAYW,YAAA;EAC3B,GAAG,CAACR,YAAA,EAAcQ,YAAA,EAAcX,UAAA,CAAW;EAE3C,IAAIoB,MAAA,GAAS,IAAAD,kBAAU,EAAE,UAACH,aAAA;IACxBC,gBAAA,CAAiBD,aAAA,aAAAA,aAAA,cAAAA,aAAA,GAAiB;IAClC,IAAIJ,MAAA,EACFP,KAAA,QAEAa,IAAA,CAAKF,aAAA;EAET,GAAG,CAACX,KAAA,EAAOa,IAAA,EAAMN,MAAA,CAAO;EAExB,OAAO,IAAAC,cAAM,EAAE;IAAA,OAAO;qBACpBG,aAAA;cACAJ,MAAA;YACAM,IAAA;aACAb,KAAA;gBACAD,QAAA;oBACAO,YAAA;MAGAU,OAAA,EAAS,SAATA,QAAA,EAAS,CAAO;cAChBD;IACF;EAAA,GAAI,CAACR,MAAA,EAAQM,IAAA,EAAMb,KAAA,EAAOD,QAAA,EAAUY,aAAA,EAAeI,MAAA,EAAQT,YAAA,CAAa;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}