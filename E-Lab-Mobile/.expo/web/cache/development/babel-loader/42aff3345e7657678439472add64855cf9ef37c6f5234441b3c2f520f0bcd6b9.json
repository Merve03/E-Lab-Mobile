{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"register\"],\n  _excluded2 = [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"preventFocusOnPress\", \"shouldCancelOnPointerExit\", \"allowTextSelectionOnPress\", \"ref\"];\nimport { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5 } from \"./context.mjs\";\nimport { _ as $7mdmh$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $7mdmh$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $7mdmh$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, getOwnerWindow as $7mdmh$getOwnerWindow } from \"@react-aria/utils\";\nimport { useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect } from \"react\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  var context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    var register = context.register,\n      contextProps = _objectWithoutProperties(context, _excluded);\n    props = (0, $7mdmh$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $7mdmh$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = new WeakMap();\nvar $f6c31cce2adf654f$var$PressEvent = function () {\n  function $f6c31cce2adf654f$var$PressEvent(type, pointerType, originalEvent, state) {\n    _classCallCheck(this, $f6c31cce2adf654f$var$PressEvent);\n    (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    var _state_target;\n    var currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;\n    var rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();\n    var x,\n      y = 0;\n    var clientX,\n      clientY = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n  return _createClass($f6c31cce2adf654f$var$PressEvent, [{\n    key: \"continuePropagation\",\n    value: function continuePropagation() {\n      (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n    }\n  }, {\n    key: \"shouldStopPropagation\",\n    get: function get() {\n      return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n    }\n  }]);\n}();\nvar $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  var _$f6c31cce2adf654f$va = $f6c31cce2adf654f$var$usePressResponderContext(props),\n    onPress = _$f6c31cce2adf654f$va.onPress,\n    onPressChange = _$f6c31cce2adf654f$va.onPressChange,\n    onPressStart = _$f6c31cce2adf654f$va.onPressStart,\n    onPressEnd = _$f6c31cce2adf654f$va.onPressEnd,\n    onPressUp = _$f6c31cce2adf654f$va.onPressUp,\n    isDisabled = _$f6c31cce2adf654f$va.isDisabled,\n    isPressedProp = _$f6c31cce2adf654f$va.isPressed,\n    preventFocusOnPress = _$f6c31cce2adf654f$va.preventFocusOnPress,\n    shouldCancelOnPointerExit = _$f6c31cce2adf654f$va.shouldCancelOnPointerExit,\n    allowTextSelectionOnPress = _$f6c31cce2adf654f$va.allowTextSelectionOnPress,\n    _ = _$f6c31cce2adf654f$va.ref,\n    domProps = _objectWithoutProperties(_$f6c31cce2adf654f$va, _excluded2);\n  var _ref = (0, $7mdmh$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    isPressed = _ref2[0],\n    setPressed = _ref2[1];\n  var ref = (0, $7mdmh$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  var _ref3 = (0, $7mdmh$useGlobalListeners)(),\n    addGlobalListener = _ref3.addGlobalListener,\n    removeAllGlobalListeners = _ref3.removeAllGlobalListeners;\n  var triggerPressStart = (0, $7mdmh$useEffectEvent)(function (originalEvent, pointerType) {\n    var state = ref.current;\n    if (isDisabled || state.didFirePressStart) return false;\n    var shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      var event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  var triggerPressEnd = (0, $7mdmh$useEffectEvent)(function (originalEvent, pointerType) {\n    var wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var state = ref.current;\n    if (!state.didFirePressStart) return false;\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    var shouldStopPropagation = true;\n    if (onPressEnd) {\n      var event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      var _event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);\n      onPress(_event);\n      shouldStopPropagation && (shouldStopPropagation = _event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  var triggerPressUp = (0, $7mdmh$useEffectEvent)(function (originalEvent, pointerType) {\n    var state = ref.current;\n    if (isDisabled) return false;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      var event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  var cancel = (0, $7mdmh$useEffectEvent)(function (e) {\n    var state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n    }\n  });\n  var cancelOnPointerExit = (0, $7mdmh$useEffectEvent)(function (e) {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  var pressProps = (0, $7mdmh$useMemo)(function () {\n    var state = ref.current;\n    var pressProps = {\n      onKeyDown: function onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          var _state_metaKeyEvents;\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          var shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n            var originalTarget = e.currentTarget;\n            var pressUp = function pressUp(e) {\n              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            };\n            addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'keyup', (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === 'Meta') state.metaKeyEvents = new Map();\n      },\n      onClick: function onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n          var shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n            if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n            var stopPressStart = triggerPressStart(e, 'virtual');\n            var stopPressUp = triggerPressUp(e, 'virtual');\n            var stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    var onKeyUp = function onKeyUp(e) {\n      var _state_metaKeyEvents;\n      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        var target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n        if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $7mdmh$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        var _state_target;\n        var events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (var event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = function (e) {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        var shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointermove', onPointerMove, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = function (e) {\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId !== state.activePointerId) return;\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n          if ('ontouchend' in state.target && e.pointerType !== 'mouse') addGlobalListener(state.target, 'touchend', onTouchEnd, {\n            once: true\n          });\n        }\n      };\n      var onTouchEnd = function onTouchEnd(e) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultUp(e.currentTarget)) e.preventDefault();\n      };\n      var onPointerCancel = function onPointerCancel(e) {\n        cancel(e);\n      };\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = function (e) {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        var shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        var shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        var shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');\n      };\n      var onMouseUp = function onMouseUp(e) {\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        var touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        var shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        var touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        var shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        var touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        var shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n      };\n      var onScroll = function onScroll(e) {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  (0, $7mdmh$useEffect)(function () {\n    return function () {\n      var _ref_current_target;\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  var key = event.key,\n    code = event.code;\n  var element = currentTarget;\n  var role = element.getAttribute('role');\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) && !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  var targetTouches = event.targetTouches;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  var changedTouches = event.changedTouches;\n  for (var i = 0; i < changedTouches.length; i++) {\n    var touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createTouchEvent(target, e) {\n  var clientX = 0;\n  var clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  var clientX = e.clientX;\n  var clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  var offsetX = 0;\n  var offsetY = 0;\n  if (point.width !== undefined) offsetX = point.width / 2;else if (point.radiusX !== undefined) offsetX = point.radiusX;\n  if (point.height !== undefined) offsetY = point.height / 2;else if (point.radiusY !== undefined) offsetY = point.radiusY;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  if (a.left > b.right || b.left > a.right) return false;\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  var rect = target.getBoundingClientRect();\n  var pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultDown(target) {\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {\n  if (target instanceof HTMLInputElement) return false;\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);\n}\nvar $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nexport { $f6c31cce2adf654f$export$45712eceda6fad21 as usePress };","map":{"version":3,"names":["$f6c31cce2adf654f$var$usePressResponderContext","props","context","$7mdmh$useContext","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","register","contextProps","_objectWithoutProperties","_excluded","$7mdmh$mergeProps","$7mdmh$useSyncRef","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","WeakMap","$f6c31cce2adf654f$var$PressEvent","type","pointerType","originalEvent","state","_classCallCheck","$7mdmh$_1","_state_target","currentTarget","target","rect","getBoundingClientRect","x","y","clientX","clientY","left","top","width","height","shiftKey","metaKey","ctrlKey","altKey","_createClass","key","value","continuePropagation","get","$7mdmh$_","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","_$f6c31cce2adf654f$va","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressedProp","isPressed","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","_excluded2","_ref","$7mdmh$useState","_ref2","_slicedToArray","setPressed","$7mdmh$useRef","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","_ref3","$7mdmh$useGlobalListeners","addGlobalListener","removeAllGlobalListeners","triggerPressStart","$7mdmh$useEffectEvent","current","shouldStopPropagation","event","triggerPressEnd","wasPressed","arguments","length","undefined","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","$14c0b72509d70225$export$b0d6fa1ab32e3295","cancelOnPointerExit","pressProps","$7mdmh$useMemo","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","_state_metaKeyEvents","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","preventDefault","repeat","originalTarget","pressUp","$7mdmh$getOwnerDocument","$7mdmh$chain","onKeyUp","stopPropagation","$7mdmh$isMac","metaKeyEvents","set","Map","onClick","button","$7mdmh$openLink","isOpening","$7mdmh$isVirtualClick","$7mdmh$focusWithoutScrolling","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","delete","size","events","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$7mdmh$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefaultDown","pointerId","$14c0b72509d70225$export$16a4697467175487","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onTouchEnd","once","$f6c31cce2adf654f$var$shouldPreventDefaultUp","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","$f6c31cce2adf654f$var$createTouchEvent","$7mdmh$getOwnerWindow","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchCancel","$7mdmh$useEffect","_ref_current_target","tagName","hasAttribute","code","element","role","getAttribute","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","radiusX","radiusY","right","bottom","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","pointRect","HTMLElement","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","has"],"sources":["C:\\Users\\merve\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\usePress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {chain, focusWithoutScrolling, getOwnerDocument, getOwnerWindow, isMac, isVirtualClick, isVirtualPointerEvent, mergeProps, openLink, useEffectEvent, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents, RefObject} from '@react-types/shared';\nimport {PressResponderContext} from './context';\nimport {TouchEvent as RTouchEvent, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element | null>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  isTriggeringEvent: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType | null,\n  userSelect?: string,\n  metaKeyEvents?: Map<string, KeyboardEvent>\n}\n\ninterface EventBase {\n  currentTarget: EventTarget | null,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean,\n  clientX?: number,\n  clientY?: number,\n  targetTouches?: Array<{clientX?: number, clientY?: number}>\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\nclass PressEvent implements IPressEvent {\n  type: IPressEvent['type'];\n  pointerType: PointerType;\n  target: Element;\n  shiftKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  altKey: boolean;\n  x: number;\n  y: number;\n  #shouldStopPropagation = true;\n\n  constructor(type: IPressEvent['type'], pointerType: PointerType, originalEvent: EventBase, state?: PressState) {\n    let currentTarget = state?.target ?? originalEvent.currentTarget;\n    const rect: DOMRect | undefined = (currentTarget as Element)?.getBoundingClientRect();\n    let x, y = 0;\n    let clientX, clientY: number | null = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget as Element;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n\n  continuePropagation() {\n    this.#shouldStopPropagation = false;\n  }\n\n  get shouldStopPropagation() {\n    return this.#shouldStopPropagation;\n  }\n}\n\nconst LINK_CLICKED = Symbol('linkClicked');\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let triggerPressStart = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) {\n      return false;\n    }\n\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(true);\n    }\n\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n\n  let triggerPressEnd = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) {\n      return false;\n    }\n\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(false);\n    }\n\n    setPressed(false);\n\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation &&= event.shouldStopPropagation;\n    }\n\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n\n  let triggerPressUp = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled) {\n      return false;\n    }\n\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n\n    return true;\n  });\n\n  let cancel = useEffectEvent((e: EventBase) => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) {\n        triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n      }\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(state.target);\n      }\n    }\n  });\n\n  let cancelOnPointerExit = useEffectEvent((e: EventBase) => {\n    if (shouldCancelOnPointerExit) {\n      cancel(e);\n    }\n  });\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = (e) => {\n              if (isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target as Element) && state.target) {\n                triggerPressUp(createEvent(state.target, e), 'keyboard');\n              }\n            };\n\n            addGlobalListener(getOwnerDocument(e.currentTarget), 'keyup', chain(pressUp, onKeyUp), true);\n          }\n\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && isMac()) {\n            state.metaKeyEvents?.set(e.key, e.nativeEvent);\n          }\n        } else if (e.key === 'Meta') {\n          state.metaKeyEvents = new Map();\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(openLink as any).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && state.target && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[LINK_CLICKED] = true;\n          openLink(state.target, e, false);\n        }\n\n        state.isPressed = false;\n        state.metaKeyEvents?.delete(e.key);\n      } else if (e.key === 'Meta' && state.metaKeyEvents?.size) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) {\n          state.target?.dispatchEvent(new KeyboardEvent('keyup', event));\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefaultDown(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointermove', onPointerMove, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefaultDown(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (state.target && isOverTarget(e, state.target)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if (isOverTarget(e, state.target) && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n\n          // Prevent subsequent touchend event from triggering onClick on unrelated elements on Android. See below.\n          // Both 'touch' and 'pen' pointerTypes trigger onTouchEnd, but 'mouse' does not.\n          if ('ontouchend' in state.target && e.pointerType !== 'mouse') {\n            addGlobalListener(state.target, 'touchend', onTouchEnd, {once: true});\n          }\n        }\n      };\n\n      // This is a workaround for an Android Chrome/Firefox issue where click events are fired on an incorrect element\n      // if the original target is removed during onPointerUp (before onClick).\n      // https://github.com/adobe/react-spectrum/issues/1513\n      // https://issues.chromium.org/issues/40732224\n      // Note: this event must be registered directly on the element, not via React props in order to work.\n      // https://github.com/facebook/react/issues/9809\n      let onTouchEnd = (e: TouchEvent) => {\n        // Don't preventDefault if we actually want the default (e.g. submit/link click).\n        if (shouldPreventDefaultUp(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefaultDown(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerDocument(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType || 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (state.target && isOverTarget(e, state.target) && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        let shouldStopPropagation = triggerPressStart(createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerWindow(e.currentTarget), 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(createTouchEvent(state.target!, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n          cancelOnPointerExit(createTouchEvent(state.target!, e));\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(createTouchEvent(state.target!, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) {\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(createTouchEvent(state.target!, e));\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [\n    addGlobalListener,\n    isDisabled,\n    preventFocusOnPress,\n    removeAllGlobalListeners,\n    allowTextSelectionOnPress,\n    cancel,\n    cancelOnPointerExit,\n    triggerPressEnd,\n    triggerPressStart,\n    triggerPressUp\n  ]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n   \n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target ?? undefined);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): target is HTMLAnchorElement {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof getOwnerWindow(element).HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof getOwnerWindow(element).HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // Links should only trigger with Enter key\n    !((role === 'link' || (!role && isHTMLAnchorLink(element))) && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createTouchEvent(target: FocusableElement, e: RTouchEvent<FocusableElement>): EventBase {\n  let clientX = 0;\n  let clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  let clientX = e.clientX;\n  let clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) {\n    offsetX = (point.width / 2);\n  } else if (point.radiusX !== undefined) {\n    offsetX = point.radiusX;\n  }\n  if (point.height !== undefined) {\n    offsetY = (point.height / 2);\n  } else if (point.radiusY !== undefined) {\n    offsetY = point.radiusY;\n  }\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefaultDown(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\n\nfunction shouldPreventDefaultUp(target: Element) {\n  if (target instanceof HTMLInputElement) {\n    return false;\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit' && target.type !== 'reset';\n  }\n\n  if (isHTMLAnchorLink(target)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  return shouldPreventDefaultUp(target);\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}