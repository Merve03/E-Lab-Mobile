{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { isElementInChildOfActiveScope as $jtpZv$isElementInChildOfActiveScope } from \"@react-aria/focus\";\nimport { useEffect as $jtpZv$useEffect } from \"react\";\nimport { useInteractOutside as $jtpZv$useInteractOutside, useFocusWithin as $jtpZv$useFocusWithin } from \"@react-aria/interactions\";\nvar $a11501f3d1d39e6c$var$visibleOverlays = [];\nfunction $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {\n  var onClose = props.onClose,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    isOpen = props.isOpen,\n    _props$isDismissable = props.isDismissable,\n    isDismissable = _props$isDismissable === void 0 ? false : _props$isDismissable,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism,\n    shouldCloseOnInteractOutside = props.shouldCloseOnInteractOutside;\n  (0, $jtpZv$useEffect)(function () {\n    if (isOpen) $a11501f3d1d39e6c$var$visibleOverlays.push(ref);\n    return function () {\n      var index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);\n      if (index >= 0) $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);\n    };\n  }, [isOpen, ref]);\n  var onHide = function onHide() {\n    if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();\n  };\n  var onInteractOutsideStart = function onInteractOutsideStart(e) {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  };\n  var onInteractOutside = function onInteractOutside(e) {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      onHide();\n    }\n  };\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {\n      e.stopPropagation();\n      e.preventDefault();\n      onHide();\n    }\n  };\n  (0, $jtpZv$useInteractOutside)({\n    ref: ref,\n    onInteractOutside: isDismissable && isOpen ? onInteractOutside : undefined,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  var _ref = (0, $jtpZv$useFocusWithin)({\n      isDisabled: !shouldCloseOnBlur,\n      onBlurWithin: function onBlurWithin(e) {\n        if (!e.relatedTarget || (0, $jtpZv$isElementInChildOfActiveScope)(e.relatedTarget)) return;\n        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }),\n    focusWithinProps = _ref.focusWithinProps;\n  var onPointerDownUnderlay = function onPointerDownUnderlay(e) {\n    if (e.target === e.currentTarget) e.preventDefault();\n  };\n  return {\n    overlayProps: _objectSpread({\n      onKeyDown: onKeyDown\n    }, focusWithinProps),\n    underlayProps: {\n      onPointerDown: onPointerDownUnderlay\n    }\n  };\n}\nexport { $a11501f3d1d39e6c$export$ea8f71083e90600f as useOverlay };","map":{"version":3,"names":["$a11501f3d1d39e6c$var$visibleOverlays","$a11501f3d1d39e6c$export$ea8f71083e90600f","props","ref","onClose","shouldCloseOnBlur","isOpen","_props$isDismissable","isDismissable","_props$isKeyboardDism","isKeyboardDismissDisabled","shouldCloseOnInteractOutside","$jtpZv$useEffect","push","index","indexOf","splice","onHide","length","onInteractOutsideStart","e","target","stopPropagation","preventDefault","onInteractOutside","onKeyDown","key","nativeEvent","isComposing","$jtpZv$useInteractOutside","undefined","_ref","$jtpZv$useFocusWithin","isDisabled","onBlurWithin","relatedTarget","$jtpZv$isElementInChildOfActiveScope","focusWithinProps","onPointerDownUnderlay","currentTarget","overlayProps","_objectSpread","underlayProps","onPointerDown"],"sources":["C:\\Users\\merve\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useOverlay.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, RefObject} from '@react-types/shared';\nimport {isElementInChildOfActiveScope} from '@react-aria/focus';\nimport {useEffect} from 'react';\nimport {useFocusWithin, useInteractOutside} from '@react-aria/interactions';\n\nexport interface AriaOverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean,\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void,\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean,\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean,\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean,\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: Element) => boolean\n}\n\nexport interface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: DOMAttributes,\n  /** Props to apply to the underlay element, if any. */\n  underlayProps: DOMAttributes\n}\n\nconst visibleOverlays: RefObject<Element | null>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(props: AriaOverlayProps, ref: RefObject<Element | null>): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isDismissable = false,\n    isKeyboardDismissDisabled = false,\n    shouldCloseOnInteractOutside\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  let onInteractOutsideStart = (e: PointerEvent) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target as Element)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  };\n\n  let onInteractOutside = (e: PointerEvent) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target as Element)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      onHide();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {\n      e.stopPropagation();\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n  useInteractOutside({ref, onInteractOutside: isDismissable && isOpen ? onInteractOutside : undefined, onInteractOutsideStart});\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: (e) => {\n      // Do not close if relatedTarget is null, which means focus is lost to the body.\n      // That can happen when switching tabs, or due to a VoiceOver/Chrome bug with Control+Option+Arrow navigation.\n      // Clicking on the body to close the overlay should already be handled by useInteractOutside.\n      // https://github.com/adobe/react-spectrum/issues/4130\n      // https://github.com/adobe/react-spectrum/issues/4922\n      //\n      // If focus is moving into a child focus scope (e.g. menu inside a dialog),\n      // do not close the outer overlay. At this point, the active scope should\n      // still be the outer overlay, since blur events run before focus.\n      if (!e.relatedTarget || isElementInChildOfActiveScope(e.relatedTarget)) {\n        return;\n      }\n\n      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget as Element)) {\n        onClose?.();\n      }\n    }\n  });\n\n  let onPointerDownUnderlay = e => {\n    // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846\n    if (e.target === e.currentTarget) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps\n    },\n    underlayProps: {\n      onPointerDown: onPointerDownUnderlay\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}