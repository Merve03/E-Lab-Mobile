{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { isCtrlKeyPressed as $feb5ffebff200149$export$16792effe837dba3, isNonContiguousSelectionModifier as $feb5ffebff200149$export$d3e3bd3e26688c04 } from \"./utils.mjs\";\nimport { useTypeSelect as $fb3050f43d946246$export$e32c88dfddc6e1d8 } from \"./useTypeSelect.mjs\";\nimport { flushSync as $3H3GQ$flushSync } from \"react-dom\";\nimport { useRef as $3H3GQ$useRef, useEffect as $3H3GQ$useEffect } from \"react\";\nimport { getFocusableTreeWalker as $3H3GQ$getFocusableTreeWalker, focusSafely as $3H3GQ$focusSafely } from \"@react-aria/focus\";\nimport { useRouter as $3H3GQ$useRouter, focusWithoutScrolling as $3H3GQ$focusWithoutScrolling, useEvent as $3H3GQ$useEvent, scrollIntoViewport as $3H3GQ$scrollIntoViewport, scrollIntoView as $3H3GQ$scrollIntoView, mergeProps as $3H3GQ$mergeProps } from \"@react-aria/utils\";\nimport { getInteractionModality as $3H3GQ$getInteractionModality } from \"@react-aria/interactions\";\nimport { useLocale as $3H3GQ$useLocale } from \"@react-aria/i18n\";\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  var manager = options.selectionManager,\n    delegate = options.keyboardDelegate,\n    ref = options.ref,\n    _options$autoFocus = options.autoFocus,\n    autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n    _options$shouldFocusW = options.shouldFocusWrap,\n    shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n    _options$disallowEmpt = options.disallowEmptySelection,\n    disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n    _options$disallowSele = options.disallowSelectAll,\n    disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n    _options$selectOnFocu = options.selectOnFocus,\n    selectOnFocus = _options$selectOnFocu === void 0 ? manager.selectionBehavior === 'replace' : _options$selectOnFocu,\n    _options$disallowType = options.disallowTypeAhead,\n    disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    _options$allowsTabNav = options.allowsTabNavigation,\n    allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav,\n    isVirtualized = options.isVirtualized,\n    _options$scrollRef = options.scrollRef,\n    scrollRef = _options$scrollRef === void 0 ? ref : _options$scrollRef,\n    _options$linkBehavior = options.linkBehavior,\n    linkBehavior = _options$linkBehavior === void 0 ? 'action' : _options$linkBehavior;\n  var _ref = (0, $3H3GQ$useLocale)(),\n    direction = _ref.direction;\n  var router = (0, $3H3GQ$useRouter)();\n  var onKeyDown = function onKeyDown(e) {\n    var _ref_current;\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    if (!((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.contains(e.target))) return;\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {\n          var _scrollRef_current;\n          (0, $3H3GQ$flushSync)(function () {\n            manager.setFocusedKey(key, childFocus);\n          });\n          var item = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n          var itemProps = manager.getItemProps(key);\n          if (item) router.open(item, e, itemProps.href, itemProps.routerOptions);\n          return;\n        }\n        manager.setFocusedKey(key, childFocus);\n        if (manager.isLink(key) && linkBehavior === 'override') return;\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var _delegate_getKeyBelow, _delegate_getFirstKey, _delegate_getFirstKey1;\n          var nextKey = manager.focusedKey != null ? (_delegate_getKeyBelow = delegate.getKeyBelow) === null || _delegate_getKeyBelow === void 0 ? void 0 : _delegate_getKeyBelow.call(delegate, manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var _delegate_getKeyAbove, _delegate_getLastKey, _delegate_getLastKey1;\n          var _nextKey = manager.focusedKey != null ? (_delegate_getKeyAbove = delegate.getKeyAbove) === null || _delegate_getKeyAbove === void 0 ? void 0 : _delegate_getKeyAbove.call(delegate, manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (_nextKey == null && shouldFocusWrap) _nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          if (_nextKey != null) {\n            e.preventDefault();\n            navigateToKey(_nextKey);\n          }\n        }\n        break;\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          var _delegate_getKeyLeftOf, _delegate_getFirstKey2, _delegate_getLastKey2;\n          var _nextKey2 = manager.focusedKey != null ? (_delegate_getKeyLeftOf = delegate.getKeyLeftOf) === null || _delegate_getKeyLeftOf === void 0 ? void 0 : _delegate_getKeyLeftOf.call(delegate, manager.focusedKey) : null;\n          if (_nextKey2 == null && shouldFocusWrap) _nextKey2 = direction === 'rtl' ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);\n          if (_nextKey2 != null) {\n            e.preventDefault();\n            navigateToKey(_nextKey2, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          var _delegate_getKeyRightOf, _delegate_getLastKey3, _delegate_getFirstKey3;\n          var _nextKey3 = manager.focusedKey != null ? (_delegate_getKeyRightOf = delegate.getKeyRightOf) === null || _delegate_getKeyRightOf === void 0 ? void 0 : _delegate_getKeyRightOf.call(delegate, manager.focusedKey) : null;\n          if (_nextKey3 == null && shouldFocusWrap) _nextKey3 = direction === 'rtl' ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);\n          if (_nextKey3 != null) {\n            e.preventDefault();\n            navigateToKey(_nextKey3, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if (firstKey != null) {\n            if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if (lastKey != null) {\n            if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow && manager.focusedKey != null) {\n          var _nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n          if (_nextKey4 != null) {\n            e.preventDefault();\n            navigateToKey(_nextKey4);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove && manager.focusedKey != null) {\n          var _nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n          if (_nextKey5 != null) {\n            e.preventDefault();\n            navigateToKey(_nextKey5);\n          }\n        }\n        break;\n      case 'a':\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          if (e.shiftKey) ref.current.focus();else {\n            var walker = (0, $3H3GQ$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            var next = undefined;\n            var last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $3H3GQ$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  var scrollPos = (0, $3H3GQ$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $3H3GQ$useEvent)(scrollRef, 'scroll', isVirtualized ? undefined : function () {\n    var _scrollRef_current, _scrollRef_current1;\n    var _scrollRef_current_scrollTop, _scrollRef_current_scrollLeft;\n    scrollPos.current = {\n      top: (_scrollRef_current_scrollTop = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.scrollTop) !== null && _scrollRef_current_scrollTop !== void 0 ? _scrollRef_current_scrollTop : 0,\n      left: (_scrollRef_current_scrollLeft = (_scrollRef_current1 = scrollRef.current) === null || _scrollRef_current1 === void 0 ? void 0 : _scrollRef_current1.scrollLeft) !== null && _scrollRef_current_scrollLeft !== void 0 ? _scrollRef_current_scrollLeft : 0\n    };\n  });\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      var _delegate_getLastKey, _delegate_getFirstKey;\n      var navigateToFirstKey = function navigateToFirstKey(key) {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      var relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate));else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate));\n    } else if (!isVirtualized && scrollRef.current) {\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (manager.focusedKey != null && scrollRef.current) {\n      var element = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`);\n      if (element) {\n        if (!element.contains(document.activeElement)) (0, $3H3GQ$focusWithoutScrolling)(element);\n        var modality = (0, $3H3GQ$getInteractionModality)();\n        if (modality === 'keyboard') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  };\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  var autoFocusRef = (0, $3H3GQ$useRef)(autoFocus);\n  (0, $3H3GQ$useEffect)(function () {\n    if (autoFocusRef.current) {\n      var _delegate_getFirstKey, _delegate_getLastKey;\n      var focusedKey = null;\n      var _delegate_getFirstKey1;\n      if (autoFocus === 'first') focusedKey = (_delegate_getFirstKey1 = (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate)) !== null && _delegate_getFirstKey1 !== void 0 ? _delegate_getFirstKey1 : null;\n      var _delegate_getLastKey1;\n      if (autoFocus === 'last') focusedKey = (_delegate_getLastKey1 = (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate)) !== null && _delegate_getLastKey1 !== void 0 ? _delegate_getLastKey1 : null;\n      var selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (var key of selectedKeys) if (manager.canSelectItem(key)) {\n          focusedKey = key;\n          break;\n        }\n      }\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) (0, $3H3GQ$focusSafely)(ref.current);\n    }\n  }, []);\n  var lastFocusedKey = (0, $3H3GQ$useRef)(manager.focusedKey);\n  (0, $3H3GQ$useEffect)(function () {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || autoFocusRef.current) && scrollRef.current && ref.current) {\n      var modality = (0, $3H3GQ$getInteractionModality)();\n      var element = ref.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`);\n      if (!element) return;\n      if (modality === 'keyboard' || autoFocusRef.current) {\n        (0, $3H3GQ$scrollIntoView)(scrollRef.current, element);\n        if (modality !== 'virtual') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null && ref.current) (0, $3H3GQ$focusSafely)(ref.current);\n    lastFocusedKey.current = manager.focusedKey;\n    autoFocusRef.current = false;\n  });\n  (0, $3H3GQ$useEvent)(ref, 'react-aria-focus-scope-restore', function (e) {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (scrollRef.current === e.target) e.preventDefault();\n    }\n  };\n  var _ref2 = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n      keyboardDelegate: delegate,\n      selectionManager: manager\n    }),\n    typeSelectProps = _ref2.typeSelectProps;\n  if (!disallowTypeAhead) handlers = (0, $3H3GQ$mergeProps)(typeSelectProps, handlers);\n  var tabIndex = undefined;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: _objectSpread(_objectSpread({}, handlers), {}, {\n      tabIndex: tabIndex\n    })\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection };","map":{"version":3,"names":["$ae20dd8cbca75726$export$d6daf82dcd84e87c","options","manager","selectionManager","delegate","keyboardDelegate","ref","_options$autoFocus","autoFocus","_options$shouldFocusW","shouldFocusWrap","_options$disallowEmpt","disallowEmptySelection","_options$disallowSele","disallowSelectAll","_options$selectOnFocu","selectOnFocus","selectionBehavior","_options$disallowType","disallowTypeAhead","shouldUseVirtualFocus","_options$allowsTabNav","allowsTabNavigation","isVirtualized","_options$scrollRef","scrollRef","_options$linkBehavior","linkBehavior","_ref","$3H3GQ$useLocale","direction","router","$3H3GQ$useRouter","onKeyDown","e","_ref_current","altKey","key","preventDefault","current","contains","target","navigateToKey","childFocus","isLink","$feb5ffebff200149$export$d3e3bd3e26688c04","_scrollRef_current","$3H3GQ$flushSync","setFocusedKey","item","querySelector","CSS","escape","toString","itemProps","getItemProps","open","href","routerOptions","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","focusedKey","call","getFirstKey","getKeyAbove","_delegate_getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","getLastKey","getKeyLeftOf","_delegate_getKeyLeftOf","_delegate_getFirstKey2","_delegate_getLastKey2","getKeyRightOf","_delegate_getKeyRightOf","_delegate_getLastKey3","_delegate_getFirstKey3","firstKey","$feb5ffebff200149$export$16792effe837dba3","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","selectedKeys","size","stopPropagation","clearSelection","focus","walker","$3H3GQ$getFocusableTreeWalker","tabbable","next","undefined","last","lastChild","document","activeElement","$3H3GQ$focusWithoutScrolling","scrollPos","$3H3GQ$useRef","top","left","$3H3GQ$useEvent","_scrollRef_current1","_scrollRef_current_scrollTop","_scrollRef_current_scrollLeft","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","modality","$3H3GQ$getInteractionModality","$3H3GQ$scrollIntoViewport","containingElement","onBlur","autoFocusRef","$3H3GQ$useEffect","canSelectItem","$3H3GQ$focusSafely","lastFocusedKey","$3H3GQ$scrollIntoView","handlers","onMouseDown","_ref2","$fb3050f43d946246$export$e32c88dfddc6e1d8","typeSelectProps","$3H3GQ$mergeProps","tabIndex","collectionProps","_objectSpread"],"sources":["C:\\Users\\merve\\node_modules\\@react-native-aria\\listbox\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, Key, KeyboardDelegate, RefObject} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport {FocusEvent, KeyboardEvent, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, scrollIntoViewport, useEvent, useRouter} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement | null>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement | null>,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {direction} = useLocale();\n  let router = useRouter();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current?.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          flushSync(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n\n          let item = scrollRef.current?.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n          let itemProps = manager.getItemProps(key);\n          if (item) {\n            router.open(item, e, itemProps.href, itemProps.routerOptions);\n          }\n\n          return;\n        }\n\n        manager.setFocusedKey(key, childFocus);\n\n        if (manager.isLink(key) && linkBehavior === 'override') {\n          return;\n        }\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow?.(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove?.(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          let nextKey: Key | undefined | null = manager.focusedKey != null ? delegate.getKeyLeftOf?.(manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getFirstKey?.(manager.focusedKey) : delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          let nextKey: Key | undefined | null = manager.focusedKey != null ? delegate.getKeyRightOf?.(manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getLastKey?.(manager.focusedKey) : delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey: Key | null = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (firstKey != null) {\n            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(firstKey);\n            } else if (selectOnFocus) {\n              manager.replaceSelection(firstKey);\n            }\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (lastKey != null) {\n            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(lastKey);\n            } else if (selectOnFocus) {\n              manager.replaceSelection(lastKey);\n            }\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement | undefined = undefined;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  /// TODO: should this happen all the time??\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? undefined : () => {\n    scrollPos.current = {\n      top: scrollRef.current?.scrollTop ?? 0,\n      left: scrollRef.current?.scrollLeft ?? 0\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined | null) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey?.());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey?.());\n      }\n    } else if (!isVirtualized && scrollRef.current) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (manager.focusedKey != null && scrollRef.current) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement)) {\n          focusWithoutScrolling(element);\n        }\n\n        let modality = getInteractionModality();\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey: Key | null = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey?.() ?? null;\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey?.() ?? null;\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (let key of selectedKeys) {\n          if (manager.canSelectItem(key)) {\n            focusedKey = key;\n            break;\n          }\n        }\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Scroll the focused element into view when the focusedKey changes.\n  let lastFocusedKey = useRef(manager.focusedKey);\n  useEffect(() => {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || autoFocusRef.current) && scrollRef.current && ref.current) {\n      let modality = getInteractionModality();\n      let element = ref.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`) as HTMLElement;\n      if (!element) {\n        // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).\n        // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.\n        return;\n      }\n\n      if (modality === 'keyboard' || autoFocusRef.current) {\n        scrollIntoView(scrollRef.current, element);\n\n        // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)\n        if (modality !== 'virtual') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null && ref.current) {\n      focusSafely(ref.current);\n    }\n\n    lastFocusedKey.current = manager.focusedKey;\n    autoFocusRef.current = false;\n  });\n\n  // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.\n  useEvent(ref, 'react-aria-focus-scope-restore', e => {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined = undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}